//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double width;
    double height;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

#pragma mark -

//
// File: Disk Utility
// UUID: E4F713E1-AA6D-3CEE-BD13-21EB14561BC6
//
//                           Arch: x86_64
//                 Source version: 1579.1.0.0.0
//       Minimum Mac OS X version: 10.12.0
//                    SDK version: 10.12.0
//
// Objective-C Garbage Collection: Unsupported
//
//                       Run path: @executable_path/../Frameworks
//                               = /Frameworks
//

@protocol NSAccessibility <NSObject>
@property(getter=isAccessibilityMinimized) BOOL accessibilityMinimized;
@property(retain) id accessibilityMinimizeButton;
@property(retain) id accessibilityZoomButton;
@property(retain) id accessibilityCloseButton;
@property(retain) id accessibilityDefaultButton;
@property(copy) NSString *accessibilityDocument;
@property(retain) id accessibilityGrowArea;
@property(retain) id accessibilityFullScreenButton;
@property(getter=isAccessibilityMain) BOOL accessibilityMain;
@property(retain) id accessibilityProxy;
@property(getter=isAccessibilityModal) BOOL accessibilityModal;
@property(retain) id accessibilityToolbarButton;
@property(copy) NSArray *accessibilitySelectedTextRanges;
@property struct _NSRange accessibilitySelectedTextRange;
@property(copy) NSString *accessibilitySelectedText;
@property long long accessibilityNumberOfCharacters;
@property struct _NSRange accessibilityVisibleCharacterRange;
@property(copy) NSArray *accessibilitySharedTextUIElements;
@property struct _NSRange accessibilitySharedCharacterRange;
@property long long accessibilityInsertionPointLineNumber;
@property struct _NSRange accessibilityColumnIndexRange;
@property struct _NSRange accessibilityRowIndexRange;
@property(copy) NSArray *accessibilityColumnHeaderUIElements;
@property(copy) NSArray *accessibilityVisibleCells;
@property(copy) NSArray *accessibilitySelectedCells;
@property(copy) NSArray *accessibilityRowHeaderUIElements;
@property long long accessibilitySortDirection;
@property(copy) NSArray *accessibilitySelectedColumns;
@property(copy) NSArray *accessibilityVisibleColumns;
@property(copy) NSArray *accessibilitySelectedRows;
@property(copy) NSArray *accessibilityVisibleRows;
@property(copy) NSArray *accessibilityRows;
@property(copy) NSArray *accessibilityColumns;
@property long long accessibilityIndex;
@property long long accessibilityRowCount;
@property long long accessibilityColumnCount;
@property(retain) id accessibilityHeader;
@property(copy) NSArray *accessibilityTabs;
@property(retain) id accessibilityIncrementButton;
@property(retain) id accessibilityDecrementButton;
@property(copy) NSArray *accessibilitySplitters;
@property float accessibilityLabelValue;
@property(copy) NSArray *accessibilityLabelUIElements;
@property(copy) NSArray *accessibilityAllowedValues;
@property(retain) id accessibilityVerticalScrollBar;
@property(retain) id accessibilityHorizontalScrollBar;
@property(copy) NSString *accessibilityMarkerTypeDescription;
@property long long accessibilityRulerMarkerType;
@property(copy) NSString *accessibilityUnitDescription;
@property long long accessibilityUnits;
@property(retain) id accessibilityMarkerGroupUIElement;
@property(retain) id accessibilityMarkerValues;
@property(copy) NSArray *accessibilityMarkerUIElements;
@property long long accessibilityDisclosureLevel;
@property(retain) id accessibilityDisclosedRows;
@property __weak id accessibilityDisclosedByRow;
@property(getter=isAccessibilityDisclosed) BOOL accessibilityDisclosed;
@property(retain) id accessibilityCriticalValue;
@property(retain) id accessibilityWarningValue;
@property(copy) NSArray *accessibilityHandles;
@property(copy) NSString *accessibilityVerticalUnitDescription;
@property(copy) NSString *accessibilityHorizontalUnitDescription;
@property long long accessibilityVerticalUnits;
@property long long accessibilityHorizontalUnits;
@property(getter=isAccessibilityOrderedByRow) BOOL accessibilityOrderedByRow;
@property(copy) NSArray *accessibilityColumnTitles;
@property __weak id accessibilityMenuBar;
@property __weak id accessibilityExtrasMenuBar;
@property(copy) NSArray *accessibilityWindows;
@property(retain) id accessibilityFocusedWindow;
@property(getter=isAccessibilityFrontmost) BOOL accessibilityFrontmost;
@property(getter=isAccessibilityHidden) BOOL accessibilityHidden;
@property(retain) id accessibilityMainWindow;
@property(retain) id accessibilityApplicationFocusedUIElement;
@property(getter=isAccessibilityRequired) BOOL accessibilityRequired;
@property(copy) NSArray *accessibilitySharedFocusElements;
@property(getter=isAccessibilityAlternateUIVisible) BOOL accessibilityAlternateUIVisible;
@property(copy) NSString *accessibilityLabel;
@property(copy) NSArray *accessibilityContents;
@property(getter=isAccessibilityProtectedContent) BOOL accessibilityProtectedContent;
@property(retain) id accessibilityCancelButton;
@property(retain) id accessibilityClearButton;
@property(copy) NSArray *accessibilityChildren;
@property(getter=isAccessibilityEnabled) BOOL accessibilityEnabled;
@property(getter=isAccessibilityEdited) BOOL accessibilityEdited;
@property(getter=isAccessibilityExpanded) BOOL accessibilityExpanded;
@property(copy) NSString *accessibilityFilename;
@property(copy) NSString *accessibilityHelp;
@property(copy) NSString *accessibilityIdentifier;
@property __weak id accessibilityWindow;
@property(copy) NSArray *accessibilityLinkedUIElements;
@property(retain) id accessibilityMaxValue;
@property(retain) id accessibilityMinValue;
@property(retain) id accessibilityShownMenu;
@property(copy) NSArray *accessibilityServesAsTitleForUIElements;
@property(copy) NSArray *accessibilitySelectedChildren;
@property(getter=isAccessibilitySelected) BOOL accessibilitySelected;
@property(retain) id accessibilitySearchMenu;
@property(retain) id accessibilitySearchButton;
@property(copy) NSString *accessibilityRoleDescription;
@property(copy) NSString *accessibilityRole;
@property(copy) NSArray *accessibilityPreviousContents;
@property(copy) NSString *accessibilityPlaceholderValue;
@property __weak id accessibilityParent;
@property(retain) id accessibilityOverflowButton;
@property long long accessibilityOrientation;
@property(copy) NSArray *accessibilityNextContents;
@property __weak id accessibilityTitleUIElement;
@property(copy) NSString *accessibilityTitle;
@property(copy) NSString *accessibilitySubrole;
@property(copy) NSArray *accessibilityVisibleChildren;
@property(copy) NSString *accessibilityValueDescription;
@property(retain) id accessibilityValue;
@property(copy) NSURL *accessibilityURL;
@property __weak id accessibilityTopLevelUIElement;
@property struct CGPoint accessibilityActivationPoint;
@property(getter=isAccessibilityFocused) BOOL accessibilityFocused;
@property struct CGRect accessibilityFrame;
@property(getter=isAccessibilityElement) BOOL accessibilityElement;
- (BOOL)isAccessibilitySelectorAllowed:(SEL)arg1;
- (BOOL)accessibilityPerformShowMenu;
- (BOOL)accessibilityPerformShowDefaultUI;
- (BOOL)accessibilityPerformShowAlternateUI;
- (BOOL)accessibilityPerformRaise;
- (BOOL)accessibilityPerformPress;
- (BOOL)accessibilityPerformPick;
- (BOOL)accessibilityPerformIncrement;
- (BOOL)accessibilityPerformDelete;
- (BOOL)accessibilityPerformDecrement;
- (BOOL)accessibilityPerformConfirm;
- (BOOL)accessibilityPerformCancel;
- (long long)accessibilityLineForIndex:(long long)arg1;
- (struct _NSRange)accessibilityStyleRangeForIndex:(long long)arg1;
- (NSData *)accessibilityRTFForRange:(struct _NSRange)arg1;
- (struct CGRect)accessibilityFrameForRange:(struct _NSRange)arg1;
- (struct _NSRange)accessibilityRangeForIndex:(long long)arg1;
- (struct _NSRange)accessibilityRangeForPosition:(struct CGPoint)arg1;
- (NSString *)accessibilityStringForRange:(struct _NSRange)arg1;
- (struct _NSRange)accessibilityRangeForLine:(long long)arg1;
- (NSAttributedString *)accessibilityAttributedStringForRange:(struct _NSRange)arg1;
- (id)accessibilityCellForColumn:(long long)arg1 row:(long long)arg2;
- (struct CGSize)accessibilityScreenSizeForLayoutSize:(struct CGSize)arg1;
- (struct CGPoint)accessibilityScreenPointForLayoutPoint:(struct CGPoint)arg1;
- (struct CGSize)accessibilityLayoutSizeForScreenSize:(struct CGSize)arg1;
- (struct CGPoint)accessibilityLayoutPointForScreenPoint:(struct CGPoint)arg1;
@end

@protocol NSAccessibilityElement <NSObject>
- (id)accessibilityParent;
- (struct CGRect)accessibilityFrame;

@optional
- (NSString *)accessibilityIdentifier;
- (BOOL)isAccessibilityFocused;
@end

@protocol NSAccessibilityGroup <NSAccessibilityElement>
@end

@protocol NSApplicationDelegate <NSObject>

@optional
- (void)applicationDidChangeOcclusionState:(NSNotification *)arg1;
- (void)applicationDidChangeScreenParameters:(NSNotification *)arg1;
- (void)applicationWillTerminate:(NSNotification *)arg1;
- (void)applicationDidUpdate:(NSNotification *)arg1;
- (void)applicationWillUpdate:(NSNotification *)arg1;
- (void)applicationDidResignActive:(NSNotification *)arg1;
- (void)applicationWillResignActive:(NSNotification *)arg1;
- (void)applicationDidBecomeActive:(NSNotification *)arg1;
- (void)applicationWillBecomeActive:(NSNotification *)arg1;
- (void)applicationDidUnhide:(NSNotification *)arg1;
- (void)applicationWillUnhide:(NSNotification *)arg1;
- (void)applicationDidHide:(NSNotification *)arg1;
- (void)applicationWillHide:(NSNotification *)arg1;
- (void)applicationDidFinishLaunching:(NSNotification *)arg1;
- (void)applicationWillFinishLaunching:(NSNotification *)arg1;
- (void)application:(NSApplication *)arg1 userDidAcceptCloudKitShareWithMetadata:(CKShareMetadata *)arg2;
- (void)application:(NSApplication *)arg1 didUpdateUserActivity:(NSUserActivity *)arg2;
- (void)application:(NSApplication *)arg1 didFailToContinueUserActivityWithType:(NSString *)arg2 error:(NSError *)arg3;
- (BOOL)application:(NSApplication *)arg1 continueUserActivity:(NSUserActivity *)arg2 restorationHandler:(void (^)(NSArray *))arg3;
- (BOOL)application:(NSApplication *)arg1 willContinueUserActivityWithType:(NSString *)arg2;
- (void)application:(NSApplication *)arg1 didDecodeRestorableState:(NSCoder *)arg2;
- (void)application:(NSApplication *)arg1 willEncodeRestorableState:(NSCoder *)arg2;
- (void)application:(NSApplication *)arg1 didReceiveRemoteNotification:(NSDictionary *)arg2;
- (void)application:(NSApplication *)arg1 didFailToRegisterForRemoteNotificationsWithError:(NSError *)arg2;
- (void)application:(NSApplication *)arg1 didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)arg2;
- (NSError *)application:(NSApplication *)arg1 willPresentError:(NSError *)arg2;
- (NSMenu *)applicationDockMenu:(NSApplication *)arg1;
- (BOOL)applicationShouldHandleReopen:(NSApplication *)arg1 hasVisibleWindows:(BOOL)arg2;
- (BOOL)applicationShouldTerminateAfterLastWindowClosed:(NSApplication *)arg1;
- (unsigned long long)application:(NSApplication *)arg1 printFiles:(NSArray *)arg2 withSettings:(NSDictionary *)arg3 showPrintPanels:(BOOL)arg4;
- (BOOL)application:(NSApplication *)arg1 printFile:(NSString *)arg2;
- (BOOL)application:(id)arg1 openFileWithoutUI:(NSString *)arg2;
- (BOOL)applicationOpenUntitledFile:(NSApplication *)arg1;
- (BOOL)applicationShouldOpenUntitledFile:(NSApplication *)arg1;
- (BOOL)application:(NSApplication *)arg1 openTempFile:(NSString *)arg2;
- (void)application:(NSApplication *)arg1 openFiles:(NSArray *)arg2;
- (BOOL)application:(NSApplication *)arg1 openFile:(NSString *)arg2;
- (unsigned long long)applicationShouldTerminate:(NSApplication *)arg1;
@end

@protocol NSControlTextEditingDelegate <NSObject>

@optional
- (NSArray *)control:(NSControl *)arg1 textView:(NSTextView *)arg2 completions:(NSArray *)arg3 forPartialWordRange:(struct _NSRange)arg4 indexOfSelectedItem:(long long *)arg5;
- (BOOL)control:(NSControl *)arg1 textView:(NSTextView *)arg2 doCommandBySelector:(SEL)arg3;
- (BOOL)control:(NSControl *)arg1 isValidObject:(id)arg2;
- (void)control:(NSControl *)arg1 didFailToValidatePartialString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 didFailToFormatString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 textShouldEndEditing:(NSText *)arg2;
- (BOOL)control:(NSControl *)arg1 textShouldBeginEditing:(NSText *)arg2;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSDraggingDestination <NSObject>

@optional
- (void)updateDraggingItemsForDrag:(id <NSDraggingInfo>)arg1;
- (BOOL)wantsPeriodicDraggingUpdates;
- (void)draggingEnded:(id <NSDraggingInfo>)arg1;
- (void)concludeDragOperation:(id <NSDraggingInfo>)arg1;
- (BOOL)performDragOperation:(id <NSDraggingInfo>)arg1;
- (BOOL)prepareForDragOperation:(id <NSDraggingInfo>)arg1;
- (void)draggingExited:(id <NSDraggingInfo>)arg1;
- (unsigned long long)draggingUpdated:(id <NSDraggingInfo>)arg1;
- (unsigned long long)draggingEntered:(id <NSDraggingInfo>)arg1;
@end

@protocol NSDraggingSource <NSObject>
- (unsigned long long)draggingSession:(NSDraggingSession *)arg1 sourceOperationMaskForDraggingContext:(long long)arg2;

@optional
- (BOOL)ignoreModifierKeysForDraggingSession:(NSDraggingSession *)arg1;
- (void)draggingSession:(NSDraggingSession *)arg1 endedAtPoint:(struct CGPoint)arg2 operation:(unsigned long long)arg3;
- (void)draggingSession:(NSDraggingSession *)arg1 movedToPoint:(struct CGPoint)arg2;
- (void)draggingSession:(NSDraggingSession *)arg1 willBeginAtPoint:(struct CGPoint)arg2;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (BOOL)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSOpenSavePanelDelegate <NSObject>

@optional
- (void)panelSelectionDidChange:(id)arg1;
- (void)panel:(id)arg1 willExpand:(BOOL)arg2;
- (NSString *)panel:(id)arg1 userEnteredFilename:(NSString *)arg2 confirmed:(BOOL)arg3;
- (void)panel:(id)arg1 didChangeToDirectoryURL:(NSURL *)arg2;
- (BOOL)panel:(id)arg1 validateURL:(NSURL *)arg2 error:(id *)arg3;
- (BOOL)panel:(id)arg1 shouldEnableURL:(NSURL *)arg2;
@end

@protocol NSOutlineViewDataSource <NSObject>

@optional
- (NSArray *)outlineView:(NSOutlineView *)arg1 namesOfPromisedFilesDroppedAtDestination:(NSURL *)arg2 forDraggedItems:(NSArray *)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 acceptDrop:(id <NSDraggingInfo>)arg2 item:(id)arg3 childIndex:(long long)arg4;
- (unsigned long long)outlineView:(NSOutlineView *)arg1 validateDrop:(id <NSDraggingInfo>)arg2 proposedItem:(id)arg3 proposedChildIndex:(long long)arg4;
- (void)outlineView:(NSOutlineView *)arg1 updateDraggingItemsForDrag:(id <NSDraggingInfo>)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 writeItems:(NSArray *)arg2 toPasteboard:(NSPasteboard *)arg3;
- (void)outlineView:(NSOutlineView *)arg1 draggingSession:(NSDraggingSession *)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)outlineView:(NSOutlineView *)arg1 draggingSession:(NSDraggingSession *)arg2 willBeginAtPoint:(struct CGPoint)arg3 forItems:(NSArray *)arg4;
- (id <NSPasteboardWriting>)outlineView:(NSOutlineView *)arg1 pasteboardWriterForItem:(id)arg2;
- (void)outlineView:(NSOutlineView *)arg1 sortDescriptorsDidChange:(NSArray *)arg2;
- (id)outlineView:(NSOutlineView *)arg1 persistentObjectForItem:(id)arg2;
- (id)outlineView:(NSOutlineView *)arg1 itemForPersistentObject:(id)arg2;
- (void)outlineView:(NSOutlineView *)arg1 setObjectValue:(id)arg2 forTableColumn:(NSTableColumn *)arg3 byItem:(id)arg4;
- (id)outlineView:(NSOutlineView *)arg1 objectValueForTableColumn:(NSTableColumn *)arg2 byItem:(id)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(NSOutlineView *)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (long long)outlineView:(NSOutlineView *)arg1 numberOfChildrenOfItem:(id)arg2;
@end

@protocol NSOutlineViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)outlineViewItemDidCollapse:(NSNotification *)arg1;
- (void)outlineViewItemWillCollapse:(NSNotification *)arg1;
- (void)outlineViewItemDidExpand:(NSNotification *)arg1;
- (void)outlineViewItemWillExpand:(NSNotification *)arg1;
- (void)outlineViewSelectionIsChanging:(NSNotification *)arg1;
- (void)outlineViewColumnDidResize:(NSNotification *)arg1;
- (void)outlineViewColumnDidMove:(NSNotification *)arg1;
- (void)outlineViewSelectionDidChange:(NSNotification *)arg1;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldShowOutlineCellForItem:(id)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)outlineView:(NSOutlineView *)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (void)outlineView:(NSOutlineView *)arg1 willDisplayOutlineCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 item:(id)arg4;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldCollapseItem:(id)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldExpandItem:(id)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 isGroupItem:(id)arg2;
- (NSCell *)outlineView:(NSOutlineView *)arg1 dataCellForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldTrackCell:(NSCell *)arg2 forTableColumn:(NSTableColumn *)arg3 item:(id)arg4;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldShowCellExpansionForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldTypeSelectForEvent:(NSEvent *)arg2 withCurrentSearchString:(NSString *)arg3;
- (id)outlineView:(NSOutlineView *)arg1 nextTypeSelectMatchFromItem:(id)arg2 toItem:(id)arg3 forString:(NSString *)arg4;
- (NSString *)outlineView:(NSOutlineView *)arg1 typeSelectStringForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (double)outlineView:(NSOutlineView *)arg1 heightOfRowByItem:(id)arg2;
- (NSString *)outlineView:(NSOutlineView *)arg1 toolTipForCell:(NSCell *)arg2 rect:(struct CGRect *)arg3 tableColumn:(NSTableColumn *)arg4 item:(id)arg5 mouseLocation:(struct CGPoint)arg6;
- (void)outlineView:(NSOutlineView *)arg1 didDragTableColumn:(NSTableColumn *)arg2;
- (void)outlineView:(NSOutlineView *)arg1 didClickTableColumn:(NSTableColumn *)arg2;
- (void)outlineView:(NSOutlineView *)arg1 mouseDownInHeaderOfTableColumn:(NSTableColumn *)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldSelectTableColumn:(NSTableColumn *)arg2;
- (NSIndexSet *)outlineView:(NSOutlineView *)arg1 selectionIndexesForProposedSelection:(NSIndexSet *)arg2;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldSelectItem:(id)arg2;
- (BOOL)selectionShouldChangeInOutlineView:(NSOutlineView *)arg1;
- (BOOL)outlineView:(NSOutlineView *)arg1 shouldEditTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
- (void)outlineView:(NSOutlineView *)arg1 willDisplayCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 item:(id)arg4;
- (void)outlineView:(NSOutlineView *)arg1 didRemoveRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (void)outlineView:(NSOutlineView *)arg1 didAddRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (NSTableRowView *)outlineView:(NSOutlineView *)arg1 rowViewForItem:(id)arg2;
- (NSView *)outlineView:(NSOutlineView *)arg1 viewForTableColumn:(NSTableColumn *)arg2 item:(id)arg3;
@end

@protocol NSTableViewDataSource <NSObject>

@optional
- (NSArray *)tableView:(NSTableView *)arg1 namesOfPromisedFilesDroppedAtDestination:(NSURL *)arg2 forDraggedRowsWithIndexes:(NSIndexSet *)arg3;
- (BOOL)tableView:(NSTableView *)arg1 acceptDrop:(id <NSDraggingInfo>)arg2 row:(long long)arg3 dropOperation:(unsigned long long)arg4;
- (unsigned long long)tableView:(NSTableView *)arg1 validateDrop:(id <NSDraggingInfo>)arg2 proposedRow:(long long)arg3 proposedDropOperation:(unsigned long long)arg4;
- (BOOL)tableView:(NSTableView *)arg1 writeRowsWithIndexes:(NSIndexSet *)arg2 toPasteboard:(NSPasteboard *)arg3;
- (void)tableView:(NSTableView *)arg1 updateDraggingItemsForDrag:(id <NSDraggingInfo>)arg2;
- (void)tableView:(NSTableView *)arg1 draggingSession:(NSDraggingSession *)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)tableView:(NSTableView *)arg1 draggingSession:(NSDraggingSession *)arg2 willBeginAtPoint:(struct CGPoint)arg3 forRowIndexes:(NSIndexSet *)arg4;
- (id <NSPasteboardWriting>)tableView:(NSTableView *)arg1 pasteboardWriterForRow:(long long)arg2;
- (void)tableView:(NSTableView *)arg1 sortDescriptorsDidChange:(NSArray *)arg2;
- (void)tableView:(NSTableView *)arg1 setObjectValue:(id)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (id)tableView:(NSTableView *)arg1 objectValueForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(NSTableView *)arg1;
@end

@protocol NSTableViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)tableViewSelectionIsChanging:(NSNotification *)arg1;
- (void)tableViewColumnDidResize:(NSNotification *)arg1;
- (void)tableViewColumnDidMove:(NSNotification *)arg1;
- (void)tableViewSelectionDidChange:(NSNotification *)arg1;
- (NSArray *)tableView:(NSTableView *)arg1 rowActionsForRow:(long long)arg2 edge:(long long)arg3;
- (BOOL)tableView:(NSTableView *)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)tableView:(NSTableView *)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (BOOL)tableView:(NSTableView *)arg1 isGroupRow:(long long)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldTypeSelectForEvent:(NSEvent *)arg2 withCurrentSearchString:(NSString *)arg3;
- (long long)tableView:(NSTableView *)arg1 nextTypeSelectMatchFromRow:(long long)arg2 toRow:(long long)arg3 forString:(NSString *)arg4;
- (NSString *)tableView:(NSTableView *)arg1 typeSelectStringForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (double)tableView:(NSTableView *)arg1 heightOfRow:(long long)arg2;
- (void)tableView:(NSTableView *)arg1 didDragTableColumn:(NSTableColumn *)arg2;
- (void)tableView:(NSTableView *)arg1 didClickTableColumn:(NSTableColumn *)arg2;
- (void)tableView:(NSTableView *)arg1 mouseDownInHeaderOfTableColumn:(NSTableColumn *)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldSelectTableColumn:(NSTableColumn *)arg2;
- (NSIndexSet *)tableView:(NSTableView *)arg1 selectionIndexesForProposedSelection:(NSIndexSet *)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldSelectRow:(long long)arg2;
- (BOOL)selectionShouldChangeInTableView:(NSTableView *)arg1;
- (NSCell *)tableView:(NSTableView *)arg1 dataCellForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (BOOL)tableView:(NSTableView *)arg1 shouldTrackCell:(NSCell *)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (BOOL)tableView:(NSTableView *)arg1 shouldShowCellExpansionForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (NSString *)tableView:(NSTableView *)arg1 toolTipForCell:(NSCell *)arg2 rect:(struct CGRect *)arg3 tableColumn:(NSTableColumn *)arg4 row:(long long)arg5 mouseLocation:(struct CGPoint)arg6;
- (BOOL)tableView:(NSTableView *)arg1 shouldEditTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (void)tableView:(NSTableView *)arg1 willDisplayCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (void)tableView:(NSTableView *)arg1 didRemoveRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (void)tableView:(NSTableView *)arg1 didAddRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (NSTableRowView *)tableView:(NSTableView *)arg1 rowViewForRow:(long long)arg2;
- (NSView *)tableView:(NSTableView *)arg1 viewForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
@end

@protocol NSTextDelegate <NSObject>

@optional
- (void)textDidChange:(NSNotification *)arg1;
- (void)textDidEndEditing:(NSNotification *)arg1;
- (void)textDidBeginEditing:(NSNotification *)arg1;
- (BOOL)textShouldEndEditing:(NSText *)arg1;
- (BOOL)textShouldBeginEditing:(NSText *)arg1;
@end

@protocol NSTextFieldDelegate <NSControlTextEditingDelegate>

@optional
- (BOOL)textField:(NSTextField *)arg1 textView:(NSTextView *)arg2 shouldSelectCandidateAtIndex:(unsigned long long)arg3;
- (NSArray *)textField:(NSTextField *)arg1 textView:(NSTextView *)arg2 candidates:(NSArray *)arg3 forSelectedRange:(struct _NSRange)arg4;
- (NSArray *)textField:(NSTextField *)arg1 textView:(NSTextView *)arg2 candidatesForSelectedRange:(struct _NSRange)arg3;
@end

@protocol NSTextViewDelegate <NSTextDelegate>

@optional
- (void)textView:(NSTextView *)arg1 draggedCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3 event:(NSEvent *)arg4;
- (void)textView:(NSTextView *)arg1 doubleClickedOnCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3;
- (void)textView:(NSTextView *)arg1 clickedOnCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3;
- (BOOL)textView:(NSTextView *)arg1 clickedOnLink:(id)arg2;
- (BOOL)textView:(NSTextView *)arg1 shouldSelectCandidateAtIndex:(unsigned long long)arg2;
- (NSArray *)textView:(NSTextView *)arg1 candidates:(NSArray *)arg2 forSelectedRange:(struct _NSRange)arg3;
- (NSArray *)textView:(NSTextView *)arg1 candidatesForSelectedRange:(struct _NSRange)arg2;
- (NSArray *)textView:(NSTextView *)arg1 shouldUpdateTouchBarItemIdentifiers:(NSArray *)arg2;
- (NSUndoManager *)undoManagerForTextView:(NSTextView *)arg1;
- (NSSharingServicePicker *)textView:(NSTextView *)arg1 willShowSharingServicePicker:(NSSharingServicePicker *)arg2 forItems:(NSArray *)arg3;
- (NSURL *)textView:(NSTextView *)arg1 URLForContentsOfTextAttachment:(NSTextAttachment *)arg2 atIndex:(unsigned long long)arg3;
- (NSArray *)textView:(NSTextView *)arg1 didCheckTextInRange:(struct _NSRange)arg2 types:(unsigned long long)arg3 options:(NSDictionary *)arg4 results:(NSArray *)arg5 orthography:(NSOrthography *)arg6 wordCount:(long long)arg7;
- (NSDictionary *)textView:(NSTextView *)arg1 willCheckTextInRange:(struct _NSRange)arg2 options:(NSDictionary *)arg3 types:(unsigned long long *)arg4;
- (NSMenu *)textView:(NSTextView *)arg1 menu:(NSMenu *)arg2 forEvent:(NSEvent *)arg3 atIndex:(unsigned long long)arg4;
- (long long)textView:(NSTextView *)arg1 shouldSetSpellingState:(long long)arg2 range:(struct _NSRange)arg3;
- (BOOL)textView:(NSTextView *)arg1 doCommandBySelector:(SEL)arg2;
- (BOOL)textView:(NSTextView *)arg1 shouldChangeTextInRange:(struct _NSRange)arg2 replacementString:(NSString *)arg3;
- (NSArray *)textView:(NSTextView *)arg1 completions:(NSArray *)arg2 forPartialWordRange:(struct _NSRange)arg3 indexOfSelectedItem:(long long *)arg4;
- (NSString *)textView:(NSTextView *)arg1 willDisplayToolTip:(NSString *)arg2 forCharacterAtIndex:(unsigned long long)arg3;
- (void)textViewDidChangeTypingAttributes:(NSNotification *)arg1;
- (void)textViewDidChangeSelection:(NSNotification *)arg1;
- (NSDictionary *)textView:(NSTextView *)arg1 shouldChangeTypingAttributes:(NSDictionary *)arg2 toAttributes:(NSDictionary *)arg3;
- (BOOL)textView:(NSTextView *)arg1 shouldChangeTextInRanges:(NSArray *)arg2 replacementStrings:(NSArray *)arg3;
- (NSArray *)textView:(NSTextView *)arg1 willChangeSelectionFromCharacterRanges:(NSArray *)arg2 toCharacterRanges:(NSArray *)arg3;
- (struct _NSRange)textView:(NSTextView *)arg1 willChangeSelectionFromCharacterRange:(struct _NSRange)arg2 toCharacterRange:(struct _NSRange)arg3;
- (BOOL)textView:(NSTextView *)arg1 writeCell:(id <NSTextAttachmentCell>)arg2 atIndex:(unsigned long long)arg3 toPasteboard:(NSPasteboard *)arg4 type:(NSString *)arg5;
- (NSArray *)textView:(NSTextView *)arg1 writablePasteboardTypesForCell:(id <NSTextAttachmentCell>)arg2 atIndex:(unsigned long long)arg3;
- (void)textView:(NSTextView *)arg1 draggedCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3 event:(NSEvent *)arg4 atIndex:(unsigned long long)arg5;
- (void)textView:(NSTextView *)arg1 doubleClickedOnCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3 atIndex:(unsigned long long)arg4;
- (void)textView:(NSTextView *)arg1 clickedOnCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3 atIndex:(unsigned long long)arg4;
- (BOOL)textView:(NSTextView *)arg1 clickedOnLink:(id)arg2 atIndex:(unsigned long long)arg3;
@end

@protocol NSToolbarDelegate <NSObject>

@optional
- (void)toolbarDidRemoveItem:(NSNotification *)arg1;
- (void)toolbarWillAddItem:(NSNotification *)arg1;
- (NSArray *)toolbarSelectableItemIdentifiers:(NSToolbar *)arg1;
- (NSArray *)toolbarAllowedItemIdentifiers:(NSToolbar *)arg1;
- (NSArray *)toolbarDefaultItemIdentifiers:(NSToolbar *)arg1;
- (NSToolbarItem *)toolbar:(NSToolbar *)arg1 itemForItemIdentifier:(NSString *)arg2 willBeInsertedIntoToolbar:(BOOL)arg3;
@end

@protocol NSWindowDelegate <NSObject>

@optional
- (void)windowDidChangeOcclusionState:(NSNotification *)arg1;
- (void)windowDidExitVersionBrowser:(NSNotification *)arg1;
- (void)windowWillExitVersionBrowser:(NSNotification *)arg1;
- (void)windowDidEnterVersionBrowser:(NSNotification *)arg1;
- (void)windowWillEnterVersionBrowser:(NSNotification *)arg1;
- (void)windowDidExitFullScreen:(NSNotification *)arg1;
- (void)windowWillExitFullScreen:(NSNotification *)arg1;
- (void)windowDidEnterFullScreen:(NSNotification *)arg1;
- (void)windowWillEnterFullScreen:(NSNotification *)arg1;
- (void)windowDidEndLiveResize:(NSNotification *)arg1;
- (void)windowWillStartLiveResize:(NSNotification *)arg1;
- (void)windowDidEndSheet:(NSNotification *)arg1;
- (void)windowWillBeginSheet:(NSNotification *)arg1;
- (void)windowDidChangeBackingProperties:(NSNotification *)arg1;
- (void)windowDidChangeScreenProfile:(NSNotification *)arg1;
- (void)windowDidChangeScreen:(NSNotification *)arg1;
- (void)windowDidUpdate:(NSNotification *)arg1;
- (void)windowDidDeminiaturize:(NSNotification *)arg1;
- (void)windowDidMiniaturize:(NSNotification *)arg1;
- (void)windowWillMiniaturize:(NSNotification *)arg1;
- (void)windowWillClose:(NSNotification *)arg1;
- (void)windowDidResignMain:(NSNotification *)arg1;
- (void)windowDidBecomeMain:(NSNotification *)arg1;
- (void)windowDidResignKey:(NSNotification *)arg1;
- (void)windowDidBecomeKey:(NSNotification *)arg1;
- (void)windowDidMove:(NSNotification *)arg1;
- (void)windowWillMove:(NSNotification *)arg1;
- (void)windowDidExpose:(NSNotification *)arg1;
- (void)windowDidResize:(NSNotification *)arg1;
- (void)window:(NSWindow *)arg1 didDecodeRestorableState:(NSCoder *)arg2;
- (void)window:(NSWindow *)arg1 willEncodeRestorableState:(NSCoder *)arg2;
- (struct CGSize)window:(NSWindow *)arg1 willResizeForVersionBrowserWithMaxPreferredSize:(struct CGSize)arg2 maxAllowedSize:(struct CGSize)arg3;
- (void)windowDidFailToExitFullScreen:(NSWindow *)arg1;
- (void)window:(NSWindow *)arg1 startCustomAnimationToEnterFullScreenOnScreen:(NSScreen *)arg2 withDuration:(double)arg3;
- (NSArray *)customWindowsToEnterFullScreenForWindow:(NSWindow *)arg1 onScreen:(NSScreen *)arg2;
- (void)window:(NSWindow *)arg1 startCustomAnimationToExitFullScreenWithDuration:(double)arg2;
- (NSArray *)customWindowsToExitFullScreenForWindow:(NSWindow *)arg1;
- (void)windowDidFailToEnterFullScreen:(NSWindow *)arg1;
- (void)window:(NSWindow *)arg1 startCustomAnimationToEnterFullScreenWithDuration:(double)arg2;
- (NSArray *)customWindowsToEnterFullScreenForWindow:(NSWindow *)arg1;
- (unsigned long long)window:(NSWindow *)arg1 willUseFullScreenPresentationOptions:(unsigned long long)arg2;
- (struct CGSize)window:(NSWindow *)arg1 willUseFullScreenContentSize:(struct CGSize)arg2;
- (BOOL)window:(NSWindow *)arg1 shouldDragDocumentWithEvent:(NSEvent *)arg2 from:(struct CGPoint)arg3 withPasteboard:(NSPasteboard *)arg4;
- (BOOL)window:(NSWindow *)arg1 shouldPopUpDocumentPathMenu:(NSMenu *)arg2;
- (struct CGRect)window:(NSWindow *)arg1 willPositionSheet:(NSWindow *)arg2 usingRect:(struct CGRect)arg3;
- (NSUndoManager *)windowWillReturnUndoManager:(NSWindow *)arg1;
- (BOOL)windowShouldZoom:(NSWindow *)arg1 toFrame:(struct CGRect)arg2;
- (struct CGRect)windowWillUseStandardFrame:(NSWindow *)arg1 defaultFrame:(struct CGRect)arg2;
- (struct CGSize)windowWillResize:(NSWindow *)arg1 toSize:(struct CGSize)arg2;
- (id)windowWillReturnFieldEditor:(NSWindow *)arg1 toObject:(id)arg2;
- (BOOL)windowShouldClose:(id)arg1;
@end

@protocol SKManagerListener <NSObject>

@optional
- (NSSet *)visibleDiskRoles;
- (void)disksDisappeared:(NSArray *)arg1;
- (void)disksChanged:(NSArray *)arg1;
- (void)disksAppeared:(NSArray *)arg1;
- (void)initialPopulateComplete;
- (void)managerResumed;
- (void)managerStalled;
@end

@protocol SUContextualTableViewDelegate <NSOutlineViewDelegate, NSObject>
- (NSMenu *)contextualMenu:(NSMenu *)arg1 forRow:(long long)arg2;
- (BOOL)shouldShowContextualMenuForRow:(long long)arg1;
@end

@protocol SUDraggableDiskIconViewDataSource <NSObject>
- (NSString *)volumeMountPointToDrag;
@end

@protocol SUDraggableDiskIconViewDelegate <NSObject>
- (void)setRepresentedDisksIconToImage:(NSImage *)arg1;
@end

@protocol SUFileDropablePopupDropDelegate <NSObject>
- (NSArray *)validDropExtensionsForPopup:(SUFileDropablePopup *)arg1;
- (void)didDrop:(NSURL *)arg1 forPopup:(SUFileDropablePopup *)arg2;
- (NSArray *)validDropUTIsForPopup:(SUFileDropablePopup *)arg1;
@end

@protocol SUPartitionChartViewDelegate <NSObject>
- (BOOL)performKeyEquivalent:(NSEvent *)arg1;
- (void)selectedPartitionNumber:(long long)arg1;
@end

@protocol SUPartitionModelApplyDelegate <NSObject>
- (void)applyStatusMessage:(NSString *)arg1;
- (void)applyProgress:(double)arg1;
- (void)applyDidFailWithError:(NSError *)arg1;
- (void)applyDidSucceed;
- (void)modelDidChange;
@end

@protocol SUSharedActionControllerMenuItemValidation <NSObject>
- (SKDisk *)representedDisk;
@end

@interface SUClickableTextField : NSTextField
{
}

- (void)otherMouseUp:(id)arg1;
- (void)rightMouseUp:(id)arg1;
- (void)mouseUp:(id)arg1;

@end

@interface SUDiskInfo : NSObject
{
    NSString *simpleDescription;
    NSMutableArray *properties;
    NSString *_diskName;
}

- (void).cxx_destruct;
- (id)_friendlyDiskStringForDisk:(id)arg1;
- (void)_buildSMARTStatusForDisk:(id)arg1;
- (void)_buildPartitionMapTypeForDisk:(id)arg1;
- (void)_buildChildCountForDisk:(id)arg1;
- (void)_buildDiskTypeForDisk:(id)arg1;
- (void)_buildLocationForDisk:(id)arg1;
- (void)_buildConnectionForDisk:(id)arg1;
- (void)_buildDeviceIdentifier:(id)arg1;
- (void)_buildOwnersForDisk:(id)arg1;
- (void)_buildUsedForDisk:(id)arg1;
- (void)_buildAvailableForDisk:(id)arg1;
- (void)_buildCapacityForDisk:(id)arg1;
- (void)_buildTypeForDisk:(id)arg1;
- (void)_buildMountPointForDisk:(id)arg1;
- (void)_buildSimpleDescriptionForDisk:(id)arg1;
- (void)_buildDiskName:(id)arg1;
- (void)_buildPropertiesForDisk:(id)arg1;
- (id)propertyValueAtIndex:(long long)arg1;
- (id)propertyNameAtIndex:(long long)arg1;
- (long long)propertyCount;
- (id)simpleDescription;
- (id)diskName;
- (void)setDiskName:(id)arg1;
- (id)initWithDisk:(id)arg1;

@end

@interface SUBaseProgressSheet : NSWindowController <NSTableViewDataSource, NSTableViewDelegate>
{
    BOOL _hasSetStatusString;
    unsigned int _noSystemIdleAssertion;
    CDUnknownBlockType _actionBlock;
    CDUnknownBlockType _completionHandler;
    NSImageView *_diskIconView;
    NSTextField *_sheetTitleField;
    NSTextField *_sheetStatusField;
    NSTextField *_detailsLabel;
    NSTableView *_logTable;
    NSButton *_disclosureButton;
    NSButton *_doneButton;
    NSLayoutConstraint *_tableSizeConstraint;
    NSLayoutConstraint *_doneButtonTopConstraint;
    NSScrollView *_scrollView;
    NSProgressIndicator *_progressBar;
    NSWindow *_parentWindow;
    NSString *__sheetTitle;
    NSImage *__sheetIcon;
    NSMutableArray *_logMessages;
}

@property(retain) NSMutableArray *logMessages; // @synthesize logMessages=_logMessages;
@property unsigned int noSystemIdleAssertion; // @synthesize noSystemIdleAssertion=_noSystemIdleAssertion;
@property BOOL hasSetStatusString; // @synthesize hasSetStatusString=_hasSetStatusString;
@property(retain) NSImage *_sheetIcon; // @synthesize _sheetIcon=__sheetIcon;
@property(retain) NSString *_sheetTitle; // @synthesize _sheetTitle=__sheetTitle;
@property(retain) NSWindow *parentWindow; // @synthesize parentWindow=_parentWindow;
@property __weak NSProgressIndicator *progressBar; // @synthesize progressBar=_progressBar;
@property __weak NSScrollView *scrollView; // @synthesize scrollView=_scrollView;
@property __weak NSLayoutConstraint *doneButtonTopConstraint; // @synthesize doneButtonTopConstraint=_doneButtonTopConstraint;
@property __weak NSLayoutConstraint *tableSizeConstraint; // @synthesize tableSizeConstraint=_tableSizeConstraint;
@property __weak NSButton *doneButton; // @synthesize doneButton=_doneButton;
@property __weak NSButton *disclosureButton; // @synthesize disclosureButton=_disclosureButton;
@property __weak NSTableView *logTable; // @synthesize logTable=_logTable;
@property __weak NSTextField *detailsLabel; // @synthesize detailsLabel=_detailsLabel;
@property __weak NSTextField *sheetStatusField; // @synthesize sheetStatusField=_sheetStatusField;
@property __weak NSTextField *sheetTitleField; // @synthesize sheetTitleField=_sheetTitleField;
@property __weak NSImageView *diskIconView; // @synthesize diskIconView=_diskIconView;
@property(copy) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(copy) CDUnknownBlockType actionBlock; // @synthesize actionBlock=_actionBlock;
- (void).cxx_destruct;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (void)copy:(id)arg1;
- (BOOL)tableView:(id)arg1 writeRowsWithIndexes:(id)arg2 toPasteboard:(id)arg3;
- (void)setSheetStatusString:(id)arg1;
- (void)dismissWithReturnCode:(long long)arg1;
@property(retain, nonatomic) NSString *sheetTitle;
@property(retain, nonatomic) NSImage *sheetIcon;
- (void)reportResult:(int)arg1;
- (void)reportProgressMessage:(id)arg1;
- (void)reportProgress:(double)arg1;
- (id)tableView:(id)arg1 viewForTableColumn:(id)arg2 row:(long long)arg3;
- (double)tableView:(id)arg1 heightOfRow:(long long)arg2;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)closeClicked:(id)arg1;
- (void)doAction;
- (BOOL)detailsVisible;
- (void)disclosureButtonClicked:(id)arg1;
- (void)disclosureLabelClicked:(id)arg1;
- (void)showDetails;
- (void)showWindowWithParentWindow:(id)arg1;
- (void)windowDidLoad;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SULightBackgroundView : NSVisualEffectView
{
}

- (void)awakeFromNib;

@end

@interface SUSelectableItem : NSCollectionViewItem
{
}

- (void)setSelected:(BOOL)arg1;

@end

@interface SUVolumeNameFieldEditor : NSTextView
{
}

- (BOOL)isFieldEditor;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface SURestoreSourceDisk : SURestoreSourceItem
{
    SKDisk *_disk;
}

@property(retain) SKDisk *disk; // @synthesize disk=_disk;
- (void).cxx_destruct;
- (id)representedDisk;
- (void)setRepresentedDisk:(id)arg1;
- (id)initWithDisk:(id)arg1;

@end

@interface SUMountedStateImageTransformer : NSValueTransformer
{
}

+ (BOOL)allowsReverseTransformation;
+ (Class)transformedValueClass;
- (id)transformedValue:(id)arg1;

@end

@interface SURAIDInfoSource : NSObject <NSTableViewDataSource, SKManagerListener>
{
    SKRAIDDisk *_disk;
    NSArray *_sliceDisks;
    NSArray *_spareDisks;
}

@property(retain) NSArray *spareDisks; // @synthesize spareDisks=_spareDisks;
@property(retain) NSArray *sliceDisks; // @synthesize sliceDisks=_sliceDisks;
@property(retain, nonatomic) SKRAIDDisk *disk; // @synthesize disk=_disk;
- (void).cxx_destruct;
- (id)visibleDiskRoles;
- (void)dealloc;
@property(readonly) NSArray *allDisks;
- (void)updateElements;
- (id)initWithDisk:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUPieSliceAccessibilityObject : NSAccessibilityElement
{
    BOOL _selected;
    SUPieSlice *_pieSlice;
    long long _sliceIndex;
    SUPartitionChartView *_parent;
}

@property __weak SUPartitionChartView *parent; // @synthesize parent=_parent;
@property long long sliceIndex; // @synthesize sliceIndex=_sliceIndex;
@property BOOL selected; // @synthesize selected=_selected;
@property(retain) SUPieSlice *pieSlice; // @synthesize pieSlice=_pieSlice;
- (void).cxx_destruct;
- (BOOL)accessibilityPerformPress;
- (BOOL)accessibilitySelected;
- (id)accessibilityLabel;
- (BOOL)isAccessibilityElement;
- (id)initWithPieSlice:(id)arg1 sliceIndex:(long long)arg2 frame:(struct CGRect)arg3 parent:(id)arg4;

@end

@interface SURAIDRemoveMemberSheetController : NSWindowController <NSTableViewDataSource>
{
    NSWindow *_parentWindow;
    SKRAIDDisk *_memberDisk;
    SKRAIDDisk *_setDisk;
    SUBaseProgressSheet *_progressSheet;
    CDUnknownBlockType _completionHandler;
}

@property(copy) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(retain) SUBaseProgressSheet *progressSheet; // @synthesize progressSheet=_progressSheet;
@property(retain) SKRAIDDisk *setDisk; // @synthesize setDisk=_setDisk;
@property(retain) SKRAIDDisk *memberDisk; // @synthesize memberDisk=_memberDisk;
@property __weak NSWindow *parentWindow; // @synthesize parentWindow=_parentWindow;
- (void).cxx_destruct;
- (void)_runRemoveMember;
- (void)showWindowWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)showWindow:(id)arg1;
- (void)windowDidLoad;
- (id)initWithMemberDisk:(id)arg1 setDisk:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUContextualOutlineView : NSOutlineView
{
}

- (id)menuForEvent:(id)arg1;

@end

@interface SUWorkspaceViewController : NSViewController
{
    NSTextField *_diskNameField;
    NSImageView *_diskIconView;
    NSTextField *_diskTypeField;
    SKDisk *_disk;
}

+ (id)viewControllerForDisk:(id)arg1;
@property(retain) SKDisk *disk; // @synthesize disk=_disk;
@property __weak NSTextField *diskTypeField; // @synthesize diskTypeField=_diskTypeField;
@property __weak NSImageView *diskIconView; // @synthesize diskIconView=_diskIconView;
@property __weak NSTextField *diskNameField; // @synthesize diskNameField=_diskNameField;
- (void).cxx_destruct;
- (void)viewDidLoad;
- (id)initWithDisk:(id)arg1;

@end

@interface SUDiskSidebarItem : SUSidebarItem <SUSharedActionControllerMenuItemValidation>
{
    BOOL _isMounted;
    BOOL _isInternal;
    BOOL _isRAIDSet;
    BOOL _isDiskImage;
    BOOL _showEjectButton;
    NSImage *_icon;
    SKDisk *_disk;
}

@property BOOL showEjectButton; // @synthesize showEjectButton=_showEjectButton;
@property BOOL isDiskImage; // @synthesize isDiskImage=_isDiskImage;
@property BOOL isRAIDSet; // @synthesize isRAIDSet=_isRAIDSet;
@property BOOL isInternal; // @synthesize isInternal=_isInternal;
@property BOOL isMounted; // @synthesize isMounted=_isMounted;
@property(retain) SKDisk *disk; // @synthesize disk=_disk;
@property(retain) NSImage *icon; // @synthesize icon=_icon;
- (void).cxx_destruct;
- (id)representedDisk;
- (void)removeChildItem:(id)arg1;
- (void)addChildItem:(id)arg1;
- (BOOL)_updateWithDisk:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (long long)compare:(id)arg1;
- (void)update;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithDisk:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SULabelSidebarItem : SUSidebarItem
{
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithTitle:(id)arg1 sortPriority:(int)arg2;

@end

@interface SUMountedStateTextTransformer : NSValueTransformer
{
}

+ (BOOL)allowsReverseTransformation;
+ (Class)transformedValueClass;
- (id)transformedValue:(id)arg1;

@end

@interface SUDraggableDiskIconView : NSImageView <NSDraggingSource, NSDraggingDestination>
{
    NSObject<SUDraggableDiskIconViewDataSource> *_datasource;
    NSObject<SUDraggableDiskIconViewDelegate> *_delegate;
}

+ (id)supportedDragTypes;
@property __weak NSObject<SUDraggableDiskIconViewDelegate> *delegate; // @synthesize delegate=_delegate;
@property __weak NSObject<SUDraggableDiskIconViewDataSource> *datasource; // @synthesize datasource=_datasource;
- (void).cxx_destruct;
- (id)_imageFromPasteboard:(id)arg1;
- (void)draggingExited:(id)arg1;
- (void)concludeDragOperation:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (unsigned long long)draggingSession:(id)arg1 sourceOperationMaskForDraggingContext:(long long)arg2;
- (void)mouseDragged:(id)arg1;
- (id)initWithCoder:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUFirstAidSheetController : NSWindowController <NSTableViewDataSource>
{
    NSWindow *_parentWindow;
    SKDisk *_targetDisk;
    SUBaseProgressSheet *_progressSheet;
    CDUnknownBlockType _completionHandler;
}

@property(copy) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(retain) SUBaseProgressSheet *progressSheet; // @synthesize progressSheet=_progressSheet;
@property(retain) SKDisk *targetDisk; // @synthesize targetDisk=_targetDisk;
@property __weak NSWindow *parentWindow; // @synthesize parentWindow=_parentWindow;
- (void).cxx_destruct;
- (void)_runVerifyOrRepairDiskIsRootVolume:(BOOL)arg1 lvNeedsResize:(BOOL)arg2;
- (void)_createLogicalVolumeForEmptyLVG;
- (void)_resizeLVToFitLVG;
- (void)_fixPartitionMapSizeIsRootVolume:(BOOL)arg1;
- (void)showWindowWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)showWindow:(id)arg1;
- (void)windowDidLoad;
- (id)initWithTargetDisk:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SURAIDAddMemberSheetController : NSWindowController <NSTableViewDataSource>
{
    BOOL _repair;
    NSWindow *_parentWindow;
    SKRAIDDisk *_targetDisk;
    NSArray *_members;
    NSArray *_spares;
    SUBaseProgressSheet *_progressSheet;
    CDUnknownBlockType _completionHandler;
}

@property(copy) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(retain) SUBaseProgressSheet *progressSheet; // @synthesize progressSheet=_progressSheet;
@property BOOL repair; // @synthesize repair=_repair;
@property(retain) NSArray *spares; // @synthesize spares=_spares;
@property(retain) NSArray *members; // @synthesize members=_members;
@property(retain) SKRAIDDisk *targetDisk; // @synthesize targetDisk=_targetDisk;
@property __weak NSWindow *parentWindow; // @synthesize parentWindow=_parentWindow;
- (void).cxx_destruct;
- (void)_runRepair;
- (void)_runAddDisks;
- (void)showWindowWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)showWindow:(id)arg1;
- (void)windowDidLoad;
- (id)initWithTargetDisk:(id)arg1 members:(id)arg2 spares:(id)arg3 repair:(BOOL)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUPartitionModelController : NSObject
{
    NSObject<SUPartitionModelApplyDelegate> *_delegate;
    SKDisk *_parentDisk;
    NSMutableArray *_originalDiskModel;
    NSMutableArray *_operationQueue;
    NSMutableArray *_computedDiskModel;
    long long _operationCount;
    long long _completedOperationCount;
    NSError *_applyError;
    NSString *_partitionMapType;
}

@property(retain) NSString *partitionMapType; // @synthesize partitionMapType=_partitionMapType;
@property(retain) NSError *applyError; // @synthesize applyError=_applyError;
@property long long completedOperationCount; // @synthesize completedOperationCount=_completedOperationCount;
@property long long operationCount; // @synthesize operationCount=_operationCount;
@property(retain) NSMutableArray *computedDiskModel; // @synthesize computedDiskModel=_computedDiskModel;
@property(retain) NSMutableArray *operationQueue; // @synthesize operationQueue=_operationQueue;
@property(retain) NSMutableArray *originalDiskModel; // @synthesize originalDiskModel=_originalDiskModel;
@property(retain) SKDisk *parentDisk; // @synthesize parentDisk=_parentDisk;
@property __weak NSObject<SUPartitionModelApplyDelegate> *delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (long long)nextIdNumberForModel:(id)arg1;
- (void)_postProgress:(double)arg1;
- (BOOL)_applyInitialPartition:(id)arg1 model:(id)arg2;
- (BOOL)_applyReformatWithDictionary:(id)arg1 model:(id)arg2;
- (BOOL)_applySplitWithDictionary:(id)arg1 model:(id)arg2;
- (BOOL)_applyRemoveWithDictionary:(id)arg1 model:(id)arg2;
- (BOOL)_applyRenameWithDictionary:(id)arg1 model:(id)arg2;
- (void)applyChanges;
- (BOOL)_isLastRenameOperationBeforeBarrier:(id)arg1 inQueue:(id)arg2;
- (BOOL)_updateSplitWithRename:(id)arg1 inQueue:(id)arg2;
- (void)_updateSplitWithResizeInfo:(id)arg1 inQueue:(id)arg2;
- (BOOL)_updateRemoveOperation:(id)arg1 inQueue:(id)arg2;
- (BOOL)_reallyCoalesceQueue:(id *)arg1;
- (id)_coalesceQueue:(id)arg1;
- (id)_makeVisualModelWithModel:(id)arg1;
- (void)_computeInitialPartitionDictionary:(id)arg1 model:(id)arg2;
- (void)_computeReformatWithDictionary:(id)arg1 model:(id)arg2;
- (void)_computeResizeWithDictionary:(id)arg1 model:(id)arg2;
- (void)_computeSplitWithDictionary:(id)arg1 model:(id)arg2 newParition:(id *)arg3;
- (void)_computeRemoveWithDictionary:(id)arg1 model:(id)arg2;
- (void)_computeRenameWithDictionary:(id)arg1 model:(id)arg2;
- (void)_computeDiskModel;
- (void)_rebuildTrueModel;
- (id)partitionsToRename;
- (id)partitionsToResize;
- (id)partitionsToErase;
- (id)partitionsToRemove;
- (id)partitionsToAdd;
- (BOOL)wouldEraseDevice;
- (BOOL)wouldFreezeRootDrive;
- (BOOL)hasChanges;
- (void)clearChanges;
- (BOOL)resizePartition:(id)arg1 withSize:(unsigned long long)arg2 splitting:(BOOL)arg3;
- (BOOL)removePartition:(id)arg1;
- (BOOL)splitPartition:(id)arg1 withUpdatedPartitionSize:(unsigned long long)arg2;
- (BOOL)canSplitPartition:(id)arg1 withSize:(unsigned long long)arg2 reason:(id *)arg3;
- (BOOL)renamePartition:(id)arg1 withName:(id)arg2;
- (BOOL)reformatPartition:(id)arg1 toFormat:(id)arg2 withPassword:(id)arg3 passwordHint:(id)arg4;
- (unsigned long long)maximumSizeForPartition:(id)arg1;
- (BOOL)createInitialPartition;
- (id)formatMenuForIndex:(long long)arg1;
- (void)prepareFormatMenuItems:(id)arg1;
- (id)selectedFormatNameAtIndex:(long long)arg1;
- (long long)indexForPartition:(id)arg1;
- (id)partitionAtIndex:(long long)arg1;
- (long long)partitionCount;
- (id)wholeDisk;
- (id)initWithVolume:(id)arg1;

@end

@interface AppDelegate : NSObject <NSApplicationDelegate>
{
    NSWindow *_window;
}

@property __weak NSWindow *window; // @synthesize window=_window;
- (void).cxx_destruct;
- (BOOL)applicationShouldTerminateAfterLastWindowClosed:(id)arg1;
- (void)applicationWillTerminate:(id)arg1;
- (void)applicationDidFinishLaunching:(id)arg1;
- (void)showMainWindow:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUPieSlice : NSObject
{
    BOOL _transient;
    BOOL _canMove;
    BOOL _canResize;
    BOOL _isInfoClipped;
    BOOL _drawAtMinimumSize;
    NSString *_name;
    unsigned long long _size;
    double _drawStartPercentage;
    SUPartition *_partitionObject;
    NSTextField *_nameTextField;
    NSTextField *_sizeTextField;
    double _drawingScale;
    double _percentageOfWhole;
    double _startPercentage;
    unsigned long long _minimumSize;
    double _minimumPercentage;
    unsigned long long _totalSize;
}

@property unsigned long long totalSize; // @synthesize totalSize=_totalSize;
@property double minimumPercentage; // @synthesize minimumPercentage=_minimumPercentage;
@property unsigned long long minimumSize; // @synthesize minimumSize=_minimumSize;
@property double startPercentage; // @synthesize startPercentage=_startPercentage;
@property double percentageOfWhole; // @synthesize percentageOfWhole=_percentageOfWhole;
@property BOOL drawAtMinimumSize; // @synthesize drawAtMinimumSize=_drawAtMinimumSize;
@property double drawingScale; // @synthesize drawingScale=_drawingScale;
@property BOOL isInfoClipped; // @synthesize isInfoClipped=_isInfoClipped;
@property(retain) NSTextField *sizeTextField; // @synthesize sizeTextField=_sizeTextField;
@property(retain) NSTextField *nameTextField; // @synthesize nameTextField=_nameTextField;
@property(retain) SUPartition *partitionObject; // @synthesize partitionObject=_partitionObject;
@property BOOL canResize; // @synthesize canResize=_canResize;
@property BOOL canMove; // @synthesize canMove=_canMove;
@property double drawStartPercentage; // @synthesize drawStartPercentage=_drawStartPercentage;
@property(getter=isTransient) BOOL transient; // @synthesize transient=_transient;
@property unsigned long long size; // @synthesize size=_size;
@property(retain) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (id)description;
@property(readonly) double minimumDrawPercentage;
@property double drawPercentage;
- (void)drawAtMinimumSize:(BOOL)arg1;
- (id)initWithPartition:(id)arg1 startLocation:(unsigned long long)arg2 totalSpace:(unsigned long long)arg3;

@end

@interface SUPartition : NSObject <NSCopying>
{
    BOOL _canMove;
    BOOL _canResize;
    BOOL _canRemove;
    BOOL _canReformat;
    BOOL _canRename;
    BOOL _isFreeSpace;
    BOOL _isJournaled;
    BOOL _isStartupDisk;
    BOOL _isUserHomeDisk;
    BOOL _willBeRenamed;
    BOOL _willBeResized;
    BOOL _willBeErased;
    BOOL _isVirtual;
    int _formatType;
    SKDisk *_disk;
    NSString *_name;
    unsigned long long _startLocation;
    unsigned long long _usedSize;
    SKFilesystem *_filesystem;
    unsigned long long _currentSize;
    unsigned long long _complexSize;
    unsigned long long _minNonComplexSize;
    unsigned long long _nonComplexSize;
    long long _idNumber;
    NSMutableArray *_nestedPartitions;
}

@property(retain) NSMutableArray *nestedPartitions; // @synthesize nestedPartitions=_nestedPartitions;
@property BOOL isVirtual; // @synthesize isVirtual=_isVirtual;
@property long long idNumber; // @synthesize idNumber=_idNumber;
@property unsigned long long nonComplexSize; // @synthesize nonComplexSize=_nonComplexSize;
@property unsigned long long minNonComplexSize; // @synthesize minNonComplexSize=_minNonComplexSize;
@property unsigned long long complexSize; // @synthesize complexSize=_complexSize;
@property unsigned long long currentSize; // @synthesize currentSize=_currentSize;
@property(retain, nonatomic) SKFilesystem *filesystem; // @synthesize filesystem=_filesystem;
@property(nonatomic) int formatType; // @synthesize formatType=_formatType;
@property(nonatomic) BOOL willBeErased; // @synthesize willBeErased=_willBeErased;
@property(nonatomic) BOOL willBeResized; // @synthesize willBeResized=_willBeResized;
@property(nonatomic) BOOL willBeRenamed; // @synthesize willBeRenamed=_willBeRenamed;
@property(nonatomic) BOOL isUserHomeDisk; // @synthesize isUserHomeDisk=_isUserHomeDisk;
@property(nonatomic) BOOL isStartupDisk; // @synthesize isStartupDisk=_isStartupDisk;
@property(nonatomic) BOOL isJournaled; // @synthesize isJournaled=_isJournaled;
@property(nonatomic) BOOL isFreeSpace; // @synthesize isFreeSpace=_isFreeSpace;
@property(nonatomic) BOOL canRename; // @synthesize canRename=_canRename;
@property(nonatomic) BOOL canReformat; // @synthesize canReformat=_canReformat;
@property(nonatomic) BOOL canRemove; // @synthesize canRemove=_canRemove;
@property(nonatomic) BOOL canResize; // @synthesize canResize=_canResize;
@property(nonatomic) BOOL canMove; // @synthesize canMove=_canMove;
@property(nonatomic) unsigned long long usedSize; // @synthesize usedSize=_usedSize;
@property(nonatomic) unsigned long long startLocation; // @synthesize startLocation=_startLocation;
@property(retain) NSString *name; // @synthesize name=_name;
@property(retain) SKDisk *disk; // @synthesize disk=_disk;
- (void).cxx_destruct;
@property(nonatomic) unsigned long long size;
@property(nonatomic) unsigned long long minSize;
- (id)associatedPartitions;
- (void)addAssociatedPartition:(id)arg1;
- (void)setIsFirstDisk;
- (BOOL)isEqual:(id)arg1;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithIDNumber:(long long)arg1;
- (id)initWithSKDisk:(id)arg1 withIDNumber:(long long)arg2;
- (id)initWithFreespace:(unsigned long long)arg1 WithIDNumber:(long long)arg2;

@end

@interface SUToolbarController : NSObject <NSToolbarDelegate>
{
    NSToolbar *_toolbar;
    NSWindow *_attachedToWindow;
    NSMutableDictionary *_buttonDictionary;
    NSObject *_actionTarget;
}

@property(retain) NSObject *actionTarget; // @synthesize actionTarget=_actionTarget;
@property(retain) NSMutableDictionary *buttonDictionary; // @synthesize buttonDictionary=_buttonDictionary;
@property(retain) NSWindow *attachedToWindow; // @synthesize attachedToWindow=_attachedToWindow;
@property(retain) NSToolbar *toolbar; // @synthesize toolbar=_toolbar;
- (void).cxx_destruct;
- (void)revalidateToolbar;
- (id)toolbarItemWithName:(id)arg1 label:(id)arg2 image:(id)arg3 action:(SEL)arg4;
- (id)toolbarItemWithName:(id)arg1;
- (id)toolbar:(id)arg1 itemForItemIdentifier:(id)arg2 willBeInsertedIntoToolbar:(BOOL)arg3;
- (id)toolbarAllowedItemIdentifiers:(id)arg1;
- (id)toolbarDefaultItemIdentifiers:(id)arg1;
- (id)initWithIdentifier:(id)arg1 attachedToWindow:(id)arg2 actionTarget:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUEraseSheetController : NSWindowController
{
    _Bool _willSecureErase;
    _Bool _isPhysicalDisk;
    _Bool _isSDCard;
    NSWindow *_parentWindow;
    SUBaseProgressSheet *_eraseProgressSheet;
    NSImageView *_diskIconView;
    NSTextField *_sheetTitle;
    NSTextField *_sheetDescription;
    NSTextField *_volumeName;
    NSPopUpButton *_eraseFormatPopup;
    NSTextField *_partitionFormatLabel;
    NSPopUpButton *_schemeFormatPopup;
    NSLayoutConstraint *_collapseSchemeConstraint;
    NSWindow *_secureOptionsWindow;
    NSButton *_secureEraseOptionButton;
    NSButton *_eraseButton;
    NSSlider *_secureEraseSlider;
    NSTextField *_secureEraseDescription;
    SUPasswordEntryDialog *_passwordEntrySheet;
    SKDisk *_targetDisk;
    NSMenuItem *_unknownItem;
    NSString *_password;
    NSString *_passwordHint;
    SKFilesystem *_previouslySelectedFormat;
}

@property _Bool isSDCard; // @synthesize isSDCard=_isSDCard;
@property _Bool isPhysicalDisk; // @synthesize isPhysicalDisk=_isPhysicalDisk;
@property(retain) SKFilesystem *previouslySelectedFormat; // @synthesize previouslySelectedFormat=_previouslySelectedFormat;
@property(retain) NSString *passwordHint; // @synthesize passwordHint=_passwordHint;
@property(retain) NSString *password; // @synthesize password=_password;
@property(retain) NSMenuItem *unknownItem; // @synthesize unknownItem=_unknownItem;
@property(retain) SKDisk *targetDisk; // @synthesize targetDisk=_targetDisk;
@property(retain) SUPasswordEntryDialog *passwordEntrySheet; // @synthesize passwordEntrySheet=_passwordEntrySheet;
@property __weak NSTextField *secureEraseDescription; // @synthesize secureEraseDescription=_secureEraseDescription;
@property __weak NSSlider *secureEraseSlider; // @synthesize secureEraseSlider=_secureEraseSlider;
@property _Bool willSecureErase; // @synthesize willSecureErase=_willSecureErase;
@property __weak NSButton *eraseButton; // @synthesize eraseButton=_eraseButton;
@property __weak NSButton *secureEraseOptionButton; // @synthesize secureEraseOptionButton=_secureEraseOptionButton;
@property __weak NSWindow *secureOptionsWindow; // @synthesize secureOptionsWindow=_secureOptionsWindow;
@property __weak NSLayoutConstraint *collapseSchemeConstraint; // @synthesize collapseSchemeConstraint=_collapseSchemeConstraint;
@property __weak NSPopUpButton *schemeFormatPopup; // @synthesize schemeFormatPopup=_schemeFormatPopup;
@property __weak NSTextField *partitionFormatLabel; // @synthesize partitionFormatLabel=_partitionFormatLabel;
@property __weak NSPopUpButton *eraseFormatPopup; // @synthesize eraseFormatPopup=_eraseFormatPopup;
@property __weak NSTextField *volumeName; // @synthesize volumeName=_volumeName;
@property __weak NSTextField *sheetDescription; // @synthesize sheetDescription=_sheetDescription;
@property __weak NSTextField *sheetTitle; // @synthesize sheetTitle=_sheetTitle;
@property __weak NSImageView *diskIconView; // @synthesize diskIconView=_diskIconView;
@property(retain) SUBaseProgressSheet *eraseProgressSheet; // @synthesize eraseProgressSheet=_eraseProgressSheet;
@property(retain) NSWindow *parentWindow; // @synthesize parentWindow=_parentWindow;
- (void).cxx_destruct;
- (void)closeSecurityOptions:(id)arg1;
- (void)securityOptionsClicked:(id)arg1;
- (void)sliderValueChanged:(id)arg1;
- (void)cancelClicked:(id)arg1;
- (void)eraseClicked:(id)arg1;
- (void)partitionMapFormatChanged:(id)arg1;
- (void)formatChanged:(id)arg1;
- (void)updateEraseFormatPopup;
- (id)_partitionMapFormats;
- (void)showWindowWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (BOOL)_validateEraseButtonEnabled;
- (void)volumeNameUpdated:(id)arg1;
- (void)windowDidLoad;
- (id)initWithTargetDisk:(id)arg1;

@end

@interface SUTransparentTableRowView : NSTableRowView
{
}

- (void)drawSeparatorInRect:(struct CGRect)arg1;
- (void)drawBackgroundInRect:(struct CGRect)arg1;
- (BOOL)isOpaque;

@end

@interface SURestoreSheetController : NSWindowController
{
    BOOL _isSrcEncrypted;
    BOOL _didMountImage;
    NSWindow *_parentWindow;
    NSTextField *_sheetTitle;
    NSTextField *_sheetDetail;
    NSImageView *_diskIconView;
    SURestoreSourceController *_sourceController;
    SKDisk *_targetDisk;
    SKDisk *_srcDisk;
    NSURL *_srcURL;
    SUBaseProgressSheet *_progressSheet;
    CDUnknownBlockType _completionHandler;
}

@property(copy) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(retain) SUBaseProgressSheet *progressSheet; // @synthesize progressSheet=_progressSheet;
@property BOOL didMountImage; // @synthesize didMountImage=_didMountImage;
@property BOOL isSrcEncrypted; // @synthesize isSrcEncrypted=_isSrcEncrypted;
@property(retain) NSURL *srcURL; // @synthesize srcURL=_srcURL;
@property(retain) SKDisk *srcDisk; // @synthesize srcDisk=_srcDisk;
@property(retain) SKDisk *targetDisk; // @synthesize targetDisk=_targetDisk;
@property __weak SURestoreSourceController *sourceController; // @synthesize sourceController=_sourceController;
@property __weak NSImageView *diskIconView; // @synthesize diskIconView=_diskIconView;
@property __weak NSTextField *sheetDetail; // @synthesize sheetDetail=_sheetDetail;
@property __weak NSTextField *sheetTitle; // @synthesize sheetTitle=_sheetTitle;
@property(retain) NSWindow *parentWindow; // @synthesize parentWindow=_parentWindow;
- (void).cxx_destruct;
- (void)restoreButtonClicked:(id)arg1;
- (void)cancelButtonClicked:(id)arg1;
- (void)showWindowWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)windowDidLoad;
- (id)initWithTargetDisk:(id)arg1;

@end

@interface SUPotentialRAIDDisk : SKBindableDisk
{
    NSMutableArray *_children;
    BOOL _isContainer;
    BOOL _isSystemContainer;
    BOOL _isRAIDMemberContainer;
    long long _futureRoleIndex;
    long long _sortPriority;
    NSString *_title;
    SUPotentialRAIDDisk *_parent;
}

@property(readonly) __weak SUPotentialRAIDDisk *parent; // @synthesize parent=_parent;
@property(retain) NSString *title; // @synthesize title=_title;
@property long long sortPriority; // @synthesize sortPriority=_sortPriority;
@property long long futureRoleIndex; // @synthesize futureRoleIndex=_futureRoleIndex;
@property(readonly) BOOL isRAIDMemberContainer; // @synthesize isRAIDMemberContainer=_isRAIDMemberContainer;
@property(readonly) BOOL isSystemContainer; // @synthesize isSystemContainer=_isSystemContainer;
@property(readonly) BOOL isContainer; // @synthesize isContainer=_isContainer;
- (void).cxx_destruct;
- (void)setParent:(id)arg1;
- (void)determineSortPriority;
- (long long)compare:(id)arg1;
- (void)addChild:(id)arg1;
- (BOOL)hasParent;
- (void)findChildrenInArray:(id)arg1;
- (id)description;
- (id)initWithRepresentedDisk:(id)arg1 forRole:(unsigned long long)arg2;
- (id)initWithRepresentedDisk:(id)arg1;

@end

@interface SUSeperatedByteCountFormatter : NSFormatter
{
    BOOL _hasDoneInitialByteConversion;
    NSPopUpButton *_unitsPopUp;
    NSTextField *_sizeTextField;
    double _unitSize;
}

@property double unitSize; // @synthesize unitSize=_unitSize;
@property BOOL hasDoneInitialByteConversion; // @synthesize hasDoneInitialByteConversion=_hasDoneInitialByteConversion;
@property __weak NSTextField *sizeTextField; // @synthesize sizeTextField=_sizeTextField;
@property __weak NSPopUpButton *unitsPopUp; // @synthesize unitsPopUp=_unitsPopUp;
- (void).cxx_destruct;
- (void)sizeUnitPopupDidChange:(id)arg1;
- (id)valueForString:(id)arg1 atUnitSize:(double)arg2;
- (void)setSelectedUnitInterval:(double)arg1;
- (BOOL)getObjectValue:(out id *)arg1 forString:(id)arg2 errorDescription:(out id *)arg3;
- (id)stringForObjectValue:(id)arg1;

@end

@interface SUScanImageController : NSObject
{
    SUBaseProgressSheet *_progressSheet;
}

@property(retain) SUBaseProgressSheet *progressSheet; // @synthesize progressSheet=_progressSheet;
- (void).cxx_destruct;
- (void)_imageScanComplete:(int)arg1;
- (void)_imageScanStatus:(id)arg1;
- (void)showWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;

@end

@interface SUSharedActionController : NSObject
{
    BOOL _lockControls;
    SKDisk *_representedDisk;
    NSTextField *_renameTextField;
    NSWindow *_window;
    SUFirstAidSheetController *_firstAidSheetController;
    SURestoreSheetController *_restoreSheetController;
    SUEraseSheetController *_eraseSheetController;
    SUImageSheetController *_imageSheetController;
    SUPartitionSheetController *_partitionSheetController;
    SUChangePasswordDialog *_changePasswordController;
    SUCreateNewImageController *_createDiskImageController;
    SUCreateImageFromFolderController *_createDiskImageFromController;
    SUScanImageController *_scanImageController;
    SUVerifyImageController *_verifyImageController;
    SUConvertImageController *_convertImageController;
    SUResizeImageController *_resizeImageController;
    SUChecksumImageController *_checksumImageController;
    SURAIDAssistantWindowController *_raidAssistantController;
}

@property BOOL lockControls; // @synthesize lockControls=_lockControls;
@property(retain) SURAIDAssistantWindowController *raidAssistantController; // @synthesize raidAssistantController=_raidAssistantController;
@property(retain) SUChecksumImageController *checksumImageController; // @synthesize checksumImageController=_checksumImageController;
@property(retain) SUResizeImageController *resizeImageController; // @synthesize resizeImageController=_resizeImageController;
@property(retain) SUConvertImageController *convertImageController; // @synthesize convertImageController=_convertImageController;
@property(retain) SUVerifyImageController *verifyImageController; // @synthesize verifyImageController=_verifyImageController;
@property(retain) SUScanImageController *scanImageController; // @synthesize scanImageController=_scanImageController;
@property(retain) SUCreateImageFromFolderController *createDiskImageFromController; // @synthesize createDiskImageFromController=_createDiskImageFromController;
@property(retain) SUCreateNewImageController *createDiskImageController; // @synthesize createDiskImageController=_createDiskImageController;
@property(retain) SUChangePasswordDialog *changePasswordController; // @synthesize changePasswordController=_changePasswordController;
@property(retain) SUPartitionSheetController *partitionSheetController; // @synthesize partitionSheetController=_partitionSheetController;
@property(retain) SUImageSheetController *imageSheetController; // @synthesize imageSheetController=_imageSheetController;
@property(retain) SUEraseSheetController *eraseSheetController; // @synthesize eraseSheetController=_eraseSheetController;
@property(retain) SURestoreSheetController *restoreSheetController; // @synthesize restoreSheetController=_restoreSheetController;
@property(retain) SUFirstAidSheetController *firstAidSheetController; // @synthesize firstAidSheetController=_firstAidSheetController;
@property __weak NSWindow *window; // @synthesize window=_window;
@property __weak NSTextField *renameTextField; // @synthesize renameTextField=_renameTextField;
@property(retain) SKDisk *representedDisk; // @synthesize representedDisk=_representedDisk;
- (void).cxx_destruct;
- (void)showRAIDAssistant:(id)arg1;
- (void)checksumImage:(id)arg1;
- (void)resizeImage:(id)arg1;
- (void)convertImage:(id)arg1;
- (void)createDmgFromFolder:(id)arg1;
- (void)createBlankDmgClicked:(id)arg1;
- (void)changePassword:(id)arg1;
- (void)renameClicked:(id)arg1;
- (void)performRenameRepresentedDisk;
- (void)enableJournalingClicked:(id)arg1;
- (void)ejectVolumeClicked:(id)arg1;
- (void)performEjectVolume:(id)arg1;
- (void)showInFinderClicked:(id)arg1;
- (void)performShowInFinder:(id)arg1;
- (void)partitionButtonClicked:(id)arg1;
- (void)performPartition:(id)arg1;
- (void)imageButtonClicked:(id)arg1;
- (void)performImage:(id)arg1;
- (void)eraseButtonClicked:(id)arg1;
- (void)performErase:(id)arg1;
- (void)restoreButtonClicked:(id)arg1;
- (void)performRestore:(id)arg1;
- (void)firstAidButtonClicked:(id)arg1;
- (void)performFirstAid:(id)arg1;
- (void)unmountButtonClicked:(id)arg1;
- (void)performUnmount:(id)arg1;
- (void)mountButtonClicked:(id)arg1;
- (void)performMount:(id)arg1;
- (void)mountOrUnmountClicked:(id)arg1;
- (void)performMountOrUnmount:(id)arg1;
- (void)unlockButtonClicked:(id)arg1;
- (void)performUnlock:(id)arg1;
- (void)getInfoClicked:(id)arg1;
- (void)performGetInfo:(id)arg1;
- (void)verifyImage:(id)arg1;
- (void)scanImageForRestore:(id)arg1;
- (void)openDmg:(id)arg1;
- (BOOL)validateEjectForDisk:(id)arg1 withError:(id *)arg2;
- (BOOL)validateChangePasswordWithError:(id *)arg1;
- (BOOL)validateRenameForDisk:(id)arg1 withError:(id *)arg2;
- (BOOL)validateEnableJournalingWithError:(id *)arg1;
- (BOOL)validateUnmountForDisk:(id)arg1 withError:(id *)arg2;
- (BOOL)validateMountForDisk:(id)arg1 withError:(id *)arg2;
- (BOOL)validateUnlockForDisk:(id)arg1 withError:(id *)arg2;
- (BOOL)validateImageForDisk:(id)arg1 withError:(id *)arg2;
- (BOOL)validateEraseForDisk:(id)arg1 withError:(id *)arg2;
- (BOOL)validatePartitionForDisk:(id)arg1 withError:(id *)arg2;
- (BOOL)validateRestoreForDisk:(id)arg1 withError:(id *)arg2;
- (BOOL)validateFirstAidForDisk:(id)arg1 withError:(id *)arg2;
- (BOOL)validateAction:(SEL)arg1 forDisk:(id)arg2 errorString:(id *)arg3;
- (BOOL)validateToolbarItem:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;

@end

@interface SUChecksumImageController : NSObject
{
    SUBaseProgressSheet *_progressSheet;
}

@property(retain) SUBaseProgressSheet *progressSheet; // @synthesize progressSheet=_progressSheet;
- (void).cxx_destruct;
- (void)_reportProgress:(double)arg1;
- (void)_reportProgressMessage:(id)arg1;
- (void)_checksumFileAtURL:(id)arg1;
- (void)showWindowWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;

@end

@interface SUSelectableView : NSView
{
    BOOL _selected;
}

@property BOOL selected; // @synthesize selected=_selected;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface SUCreateImageFromFolderController : NSObject
{
    NSWindow *_parent;
    SUSaveImageDiskImagePane *_diskImageSavePanel;
    SUBaseProgressSheet *_progressSheet;
    NSURL *_folderURL;
    CDUnknownBlockType _completionHandler;
}

@property(copy) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(retain) NSURL *folderURL; // @synthesize folderURL=_folderURL;
@property(retain) SUBaseProgressSheet *progressSheet; // @synthesize progressSheet=_progressSheet;
@property(retain) SUSaveImageDiskImagePane *diskImageSavePanel; // @synthesize diskImageSavePanel=_diskImageSavePanel;
@property(retain) NSWindow *parent; // @synthesize parent=_parent;
- (void).cxx_destruct;
- (void)_imageProgressWithDictionary:(id)arg1;
- (void)createImage;
- (void)_showSaveWindow;
- (void)showWindowWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;

@end

@interface SUPasswordEntryDialog : NSWindowController
{
    BOOL _hasAccepted;
    BOOL _hideHint;
    NSTextField *_passwordField;
    NSTextField *_verifyPasswordField;
    NSTextField *_passwordErrorField;
    NSTextView *_passwordHintField;
    NSView *_passwordHintContainerView;
    NSWindow *_parentWindow;
    NSLayoutConstraint *_collapsePasswordHintConstraint;
    SFPasswordAssistantInspectorController *_passwordAssistant;
    NSButton *_passwordAssistantButton;
}

@property BOOL hideHint; // @synthesize hideHint=_hideHint;
@property BOOL hasAccepted; // @synthesize hasAccepted=_hasAccepted;
@property __weak NSButton *passwordAssistantButton; // @synthesize passwordAssistantButton=_passwordAssistantButton;
@property(retain) SFPasswordAssistantInspectorController *passwordAssistant; // @synthesize passwordAssistant=_passwordAssistant;
@property __weak NSLayoutConstraint *collapsePasswordHintConstraint; // @synthesize collapsePasswordHintConstraint=_collapsePasswordHintConstraint;
@property(retain) NSWindow *parentWindow; // @synthesize parentWindow=_parentWindow;
@property __weak NSView *passwordHintContainerView; // @synthesize passwordHintContainerView=_passwordHintContainerView;
@property NSTextView *passwordHintField; // @synthesize passwordHintField=_passwordHintField;
@property __weak NSTextField *passwordErrorField; // @synthesize passwordErrorField=_passwordErrorField;
@property __weak NSTextField *verifyPasswordField; // @synthesize verifyPasswordField=_verifyPasswordField;
@property __weak NSTextField *passwordField; // @synthesize passwordField=_passwordField;
- (void).cxx_destruct;
- (void)_setErrorString:(id)arg1;
- (void)_hideHintView:(BOOL)arg1;
- (void)showPasswordAssistant:(id)arg1;
- (void)hidePasswordHint:(BOOL)arg1;
@property(readonly, nonatomic) NSString *passwordHint;
@property(readonly, nonatomic) NSString *password;
- (void)cancel:(id)arg1;
- (void)choosePassword:(id)arg1;
- (void)showWindowWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)windowDidLoad;
- (id)init;

@end

@interface SUChangePasswordDialog : NSWindowController
{
    BOOL _hasAccepted;
    BOOL _isSheetMode;
    NSTextField *_oldPasswordField;
    NSTextField *_passwordField;
    NSTextField *_verifyPasswordField;
    NSTextField *_passwordErrorField;
    NSTextView *_passwordHintField;
    SFPasswordAssistantInspectorController *_passwordAssistant;
    NSButton *_passwordAssistantButton;
    SKDisk *_targetDisk;
}

@property BOOL isSheetMode; // @synthesize isSheetMode=_isSheetMode;
@property BOOL hasAccepted; // @synthesize hasAccepted=_hasAccepted;
@property(retain) SKDisk *targetDisk; // @synthesize targetDisk=_targetDisk;
@property __weak NSButton *passwordAssistantButton; // @synthesize passwordAssistantButton=_passwordAssistantButton;
@property(retain) SFPasswordAssistantInspectorController *passwordAssistant; // @synthesize passwordAssistant=_passwordAssistant;
@property NSTextView *passwordHintField; // @synthesize passwordHintField=_passwordHintField;
@property __weak NSTextField *passwordErrorField; // @synthesize passwordErrorField=_passwordErrorField;
@property __weak NSTextField *verifyPasswordField; // @synthesize verifyPasswordField=_verifyPasswordField;
@property __weak NSTextField *passwordField; // @synthesize passwordField=_passwordField;
@property __weak NSTextField *oldPasswordField; // @synthesize oldPasswordField=_oldPasswordField;
- (void).cxx_destruct;
- (void)_setErrorString:(id)arg1;
- (void)showPasswordAssistant:(id)arg1;
- (void)cancel:(id)arg1;
- (void)changePassword:(id)arg1;
- (void)showWindow:(id)arg1;
- (void)windowDidLoad;
- (id)initWithTargetDisk:(id)arg1;

@end

@interface SUSidebarController : NSObject <NSOutlineViewDelegate, NSOutlineViewDataSource, SUContextualTableViewDelegate, SKManagerListener>
{
    BOOL _hasPopulated;
    SUWorkspaceController *_workspaceController;
    NSMutableArray *_sidebarItems;
    NSOutlineView *_disksTable;
    NSMutableArray *_sortDescriptors;
    NSMutableArray *_labels;
    SKDisk *_selectedDisk;
    NSMutableArray *_processedDisks;
    NSMutableDictionary *_diskMapping;
}

@property(retain) NSMutableDictionary *diskMapping; // @synthesize diskMapping=_diskMapping;
@property(retain) NSMutableArray *processedDisks; // @synthesize processedDisks=_processedDisks;
@property BOOL hasPopulated; // @synthesize hasPopulated=_hasPopulated;
@property(retain) SKDisk *selectedDisk; // @synthesize selectedDisk=_selectedDisk;
@property(retain) NSMutableArray *labels; // @synthesize labels=_labels;
@property(retain) NSMutableArray *sortDescriptors; // @synthesize sortDescriptors=_sortDescriptors;
@property __weak NSOutlineView *disksTable; // @synthesize disksTable=_disksTable;
@property(retain) NSMutableArray *sidebarItems; // @synthesize sidebarItems=_sidebarItems;
@property __weak SUWorkspaceController *workspaceController; // @synthesize workspaceController=_workspaceController;
- (void).cxx_destruct;
- (void)eraseButtonClicked:(id)arg1;
- (void)partitionButtonClicked:(id)arg1;
- (void)restoreButtonClicked:(id)arg1;
- (void)imageButtonClicked:(id)arg1;
- (void)ejectVolumeClicked:(id)arg1;
- (void)mountOrUnmountClicked:(id)arg1;
- (void)renameClicked:(id)arg1;
- (void)firstAidButtonClicked:(id)arg1;
- (void)showInFinderClicked:(id)arg1;
- (void)getInfoClicked:(id)arg1;
- (void)ejectVolumeButtonClicked:(id)arg1;
- (id)outlineView:(id)arg1 rowViewForItem:(id)arg2;
- (BOOL)validateMenuItem:(id)arg1;
- (id)contextualMenu:(id)arg1 forRow:(long long)arg2;
- (BOOL)shouldShowContextualMenuForRow:(long long)arg1;
- (BOOL)outlineView:(id)arg1 shouldSelectItem:(id)arg2;
- (BOOL)_selectDisk:(id)arg1 underItem:(id)arg2;
- (void)outlineViewItemDidExpand:(id)arg1;
- (void)outlineViewSelectionDidChange:(id)arg1;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(id)arg1 viewForTableColumn:(id)arg2 item:(id)arg3;
- (BOOL)outlineView:(id)arg1 isGroupItem:(id)arg2;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (id)_itemForSortOrder:(int)arg1;
- (void)_processSidebarItemForPartition:(id)arg1;
- (void)_processSidebarItemForWholeDisk:(id)arg1;
- (void)_processSidebarItemForDisk:(id)arg1;
- (void)_rebuildSidebarItemsWithDiskArray:(id)arg1;
- (id)_sidebarItemWithDisk:(id)arg1;
- (BOOL)removeDisk:(id)arg1 fromItem:(id)arg2;
- (void)removeDiskFromSidebar:(id)arg1;
- (void)expandAllSidebarItems;
- (BOOL)_listContainsUnsupportedDisks:(id)arg1;
- (BOOL)_tryAndSelectSlashReturningSuccess;
- (BOOL)selectDisk:(id)arg1;
- (void)_updateSelectionOnDiskChange;
- (id)visibleDiskRoles;
- (void)initialPopulateComplete;
- (void)disksDisappeared:(id)arg1;
- (void)disksChanged:(id)arg1;
- (void)disksAppeared:(id)arg1;
- (void)awakeFromNib;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUEnabledDisableColorTransformer : NSValueTransformer
{
}

+ (BOOL)allowsReverseTransformation;
+ (Class)transformedValueClass;
- (id)transformedValue:(id)arg1;

@end

@interface SUColoredCircleView : NSView
{
    NSColor *circleColor;
    NSColor *strokeColor;
    BOOL _striped;
}

@property(getter=isStriped) BOOL striped; // @synthesize striped=_striped;
- (void).cxx_destruct;
- (void)drawRect:(struct CGRect)arg1;
- (void)setStrokeColor:(id)arg1;
- (void)setCircleColor:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface SURAIDAssistantWindowController : NSWindowController <NSWindowDelegate>
{
    BOOL _rebuildAutomatically;
    int _raidType;
    NSTextField *_title;
    NSButton *_nextButton;
    NSButton *_previousButton;
    NSButton *_cancelButton;
    SURAIDBackgroundColorView *_viewContainer;
    CDUnknownBlockType _completionHandler;
    SURAIDAssistantPaneController *_paneController;
    NSArray *_selectedDisks;
    NSString *_raidName;
    SKFilesystem *_requestedFormat;
    unsigned long long _chunkSize;
    NSString *_resultString;
}

@property(retain) NSString *resultString; // @synthesize resultString=_resultString;
@property BOOL rebuildAutomatically; // @synthesize rebuildAutomatically=_rebuildAutomatically;
@property unsigned long long chunkSize; // @synthesize chunkSize=_chunkSize;
@property(retain) SKFilesystem *requestedFormat; // @synthesize requestedFormat=_requestedFormat;
@property(retain) NSString *raidName; // @synthesize raidName=_raidName;
@property(retain) NSArray *selectedDisks; // @synthesize selectedDisks=_selectedDisks;
@property int raidType; // @synthesize raidType=_raidType;
@property(retain) SURAIDAssistantPaneController *paneController; // @synthesize paneController=_paneController;
@property(copy) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property __weak SURAIDBackgroundColorView *viewContainer; // @synthesize viewContainer=_viewContainer;
@property __weak NSButton *cancelButton; // @synthesize cancelButton=_cancelButton;
@property __weak NSButton *previousButton; // @synthesize previousButton=_previousButton;
@property __weak NSButton *nextButton; // @synthesize nextButton=_nextButton;
@property __weak NSTextField *title; // @synthesize title=_title;
- (void).cxx_destruct;
- (void)helpClicked:(id)arg1;
- (void)nextClicked:(id)arg1;
- (void)previousClicked:(id)arg1;
- (void)cancelClicked:(id)arg1;
- (void)showWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)windowWillClose:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_goToPaneController:(id)arg1;
- (void)dealloc;
- (void)windowDidLoad;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUUtilities : NSObject
{
}

+ (id)HFSFileSystemsIncludingEncrypted:(BOOL)arg1;
+ (id)sanitizeNameForCoreStorage:(id)arg1;
+ (id)processNameForPID:(int)arg1;
+ (void)showFailureAlertForPID:(int)arg1 diskName:(id)arg2 isEject:(BOOL)arg3;
+ (BOOL)logicalVolumeGroupIsFusionDriveLike:(id)arg1;
+ (id)fusionDriveLikeLVGOnPhysicalWholeDisk:(id)arg1;
+ (BOOL)physicalDeviceContainsFusionLikeDisk:(id)arg1;
+ (id)mountDiskImageAtPath:(id)arg1 visible:(BOOL)arg2 readOnly:(BOOL)arg3;
+ (int)sizeUnitCount;
+ (id)sizeStringForUnitSize:(unsigned long long)arg1;
+ (BOOL)parseString:(id)arg1 toByteCount:(unsigned long long *)arg2;
+ (id)formatMenuItemForUnknownFilesystem;
+ (id)formatMenuForDisk:(id)arg1;
+ (id)formatMenuForFileSystemTypes:(id)arg1 withPartitionMapType:(id)arg2 disableLVTypes:(BOOL)arg3;
+ (id)formatMenuForFileSystemTypes:(id)arg1 withPartitionMapType:(id)arg2;
+ (id)formatDictionaryForFileSystemType:(id)arg1 caseSensative:(BOOL)arg2 encrypted:(BOOL)arg3;
+ (id)ditherImage:(id)arg1 toAlpha:(double)arg2 atSize:(struct CGSize)arg3;
+ (id)badgeImage:(id)arg1 withImage:(id)arg2 atSize:(struct CGSize)arg3;

@end

@interface SUResizeImageController : NSObject <NSOpenSavePanelDelegate>
{
    NSWindow *_parentWindow;
    NSOpenPanel *_openPanel;
    NSArray *_topLevelObjects;
    NSTextField *_sizeField;
    NSWindow *_resizeSheet;
    SUBaseProgressSheet *_progressSheet;
    unsigned long long _minimumSize;
    unsigned long long _maximumSize;
    unsigned long long _currentSize;
    unsigned long long _sectorSize;
    CDUnknownBlockType _completionHandler;
}

@property(copy) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property unsigned long long sectorSize; // @synthesize sectorSize=_sectorSize;
@property unsigned long long currentSize; // @synthesize currentSize=_currentSize;
@property unsigned long long maximumSize; // @synthesize maximumSize=_maximumSize;
@property unsigned long long minimumSize; // @synthesize minimumSize=_minimumSize;
@property(retain) SUBaseProgressSheet *progressSheet; // @synthesize progressSheet=_progressSheet;
@property __weak NSWindow *resizeSheet; // @synthesize resizeSheet=_resizeSheet;
@property __weak NSTextField *sizeField; // @synthesize sizeField=_sizeField;
@property(retain) NSArray *topLevelObjects; // @synthesize topLevelObjects=_topLevelObjects;
@property(retain) NSOpenPanel *openPanel; // @synthesize openPanel=_openPanel;
@property __weak NSWindow *parentWindow; // @synthesize parentWindow=_parentWindow;
- (void).cxx_destruct;
- (void)_reportProgress:(double)arg1;
- (void)_reportProgressMessage:(id)arg1;
- (void)cancelClicked:(id)arg1;
- (void)resizeClicked:(id)arg1;
- (void)sizeChanged:(id)arg1;
- (void)_resizeImage:(void *)arg1 toSize:(unsigned long long)arg2;
- (void)_loadInfoForResizeSheet;
- (void)showWindowWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUEjectButton : NSButton
{
    long long _trackingRectTag;
}

@property long long trackingRectTag; // @synthesize trackingRectTag=_trackingRectTag;
- (void)mouseDown:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)viewDidMoveToWindow;
- (id)initWithCoder:(id)arg1;

@end

@interface SUPartitionSizePopoverViewController : NSViewController
{
    NSTextField *_partitionNameField;
    NSTextField *_sizeField;
}

@property(retain) NSTextField *sizeField; // @synthesize sizeField=_sizeField;
@property(retain) NSTextField *partitionNameField; // @synthesize partitionNameField=_partitionNameField;
- (void).cxx_destruct;

@end

@interface SURestoreSourceImage : SURestoreSourceItem
{
    NSURL *_imageURL;
}

@property(retain) NSURL *imageURL; // @synthesize imageURL=_imageURL;
- (void).cxx_destruct;
- (id)representedImageURL;
- (id)initWithImageFileURL:(id)arg1;

@end

@interface SURAIDAssistantPaneController : NSViewController
{
    BOOL _nextEnabled;
    BOOL _previousEnabled;
    BOOL _cancelEnabled;
    BOOL _isDone;
    NSResponder *_firstViewResponder;
}

@property __weak NSResponder *firstViewResponder; // @synthesize firstViewResponder=_firstViewResponder;
@property BOOL isDone; // @synthesize isDone=_isDone;
@property BOOL cancelEnabled; // @synthesize cancelEnabled=_cancelEnabled;
@property BOOL previousEnabled; // @synthesize previousEnabled=_previousEnabled;
@property BOOL nextEnabled; // @synthesize nextEnabled=_nextEnabled;
- (void).cxx_destruct;
- (id)previousPaneIdentifer;
- (id)nextPaneIdentifier;
- (void)viewDidLoad;
- (id)title;
- (id)paneIdentifier;

@end

@interface SURAIDPopupCellView : NSTableCellView
{
    NSPopUpButton *_button;
    id _representedObject;
}

@property __weak id representedObject; // @synthesize representedObject=_representedObject;
@property __weak NSPopUpButton *button; // @synthesize button=_button;
- (void).cxx_destruct;
- (void)stateChanged:(id)arg1;
- (void)awakeFromNib;

@end

@interface SUVolumeRenameView : NSTextField <NSTextViewDelegate>
{
}

- (struct CGSize)intrinsicContentSize;
- (void)textDidChange:(id)arg1;
- (void)drawFocusRingMask;
- (BOOL)textView:(id)arg1 doCommandBySelector:(SEL)arg2;
- (void)mouseDown:(id)arg1;
- (id)initWithCoder:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUSaveImageDiskImagePane : NSObject <NSTextFieldDelegate>
{
    BOOL _supportsISO;
    NSString *_password;
    NSPopUpButton *_encryptionFormatPopup;
    NSPopUpButton *_imageTypePopup;
    NSArray *_topLevelObjects;
    SUPasswordEntryDialog *_passwordEntrySheet;
    NSDictionary *_createSupportDictionary;
    NSSavePanel *_savePanel;
    NSView *_view;
}

+ (id)savePanelSupportsISOData:(BOOL)arg1;
@property BOOL supportsISO; // @synthesize supportsISO=_supportsISO;
@property(retain) NSView *view; // @synthesize view=_view;
@property(retain) NSSavePanel *savePanel; // @synthesize savePanel=_savePanel;
@property(retain) NSDictionary *createSupportDictionary; // @synthesize createSupportDictionary=_createSupportDictionary;
@property(retain) SUPasswordEntryDialog *passwordEntrySheet; // @synthesize passwordEntrySheet=_passwordEntrySheet;
@property(retain) NSArray *topLevelObjects; // @synthesize topLevelObjects=_topLevelObjects;
@property __weak NSPopUpButton *imageTypePopup; // @synthesize imageTypePopup=_imageTypePopup;
@property __weak NSPopUpButton *encryptionFormatPopup; // @synthesize encryptionFormatPopup=_encryptionFormatPopup;
@property(retain) NSString *password; // @synthesize password=_password;
- (void).cxx_destruct;
- (id)imageTypeDictionary;
- (id)encryptionDictionary;
- (void)imageTypeChanged:(id)arg1;
- (void)_evaluateCreateRules;
- (void)encryptionTypeChanged:(id)arg1;
- (void)_selectEncryptionOfType:(id)arg1;
- (void)_addEncryptionFromatFromDictionary:(id)arg1;
- (void)_addImageFormatsToMenuFromArray:(id)arg1;
- (void)_addIffFormatsToMenuFromArray:(id)arg1;
- (void)_selectDefaults;
- (void)_populateView;
- (void)beginSheetModalForWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)URL;
- (id)initWithISOSUpport:(BOOL)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUSidebarItem : NSObject <NSCopying>
{
    int _type;
    int _sortPriority;
    NSString *_title;
    unsigned long long _itemSortPriority;
    SUSidebarItem *_parent;
    NSMutableArray *_childItems;
}

@property(retain) NSMutableArray *childItems; // @synthesize childItems=_childItems;
@property __weak SUSidebarItem *parent; // @synthesize parent=_parent;
@property unsigned long long itemSortPriority; // @synthesize itemSortPriority=_itemSortPriority;
@property int sortPriority; // @synthesize sortPriority=_sortPriority;
@property int type; // @synthesize type=_type;
@property(retain) NSString *title; // @synthesize title=_title;
- (void).cxx_destruct;
- (id)children;
- (void)removeChildItem:(id)arg1;
- (void)addChildItem:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (long long)compare:(id)arg1;
- (id)init;

@end

@interface SUDiskUsageCache : NSObject
{
    NSObject<OS_dispatch_queue> *cachingQueue;
    NSMutableDictionary *diskUsageCache;
    NSLock *usageLock;
}

+ (id)sharedCache;
- (void).cxx_destruct;
- (void)_cacheForDisk:(id)arg1;
- (id)usageInfoForDisk:(id)arg1;
- (id)init;

@end

@interface SUVolumeWorkspaceViewController : SUWorkspaceViewController <SUDraggableDiskIconViewDataSource, SUDraggableDiskIconViewDelegate>
{
    SUInfoTableView *_infoTable;
    SUDiskUsageView *_diskUsageView;
}

@property __weak SUDiskUsageView *diskUsageView; // @synthesize diskUsageView=_diskUsageView;
@property __weak SUInfoTableView *infoTable; // @synthesize infoTable=_infoTable;
- (void).cxx_destruct;
- (void)updateDiskIcon;
- (void)setRepresentedDisksIconToImage:(id)arg1;
- (void)volumeRenamed:(id)arg1;
- (id)volumeMountPointToDrag;
- (void)viewDidLoad;
- (id)initWithDisk:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUWindow : NSWindow
{
    SUToolbarController *_toolbarController;
    SUSharedActionController *_actionController;
}

@property __weak SUSharedActionController *actionController; // @synthesize actionController=_actionController;
@property(retain) SUToolbarController *toolbarController; // @synthesize toolbarController=_toolbarController;
- (void).cxx_destruct;
- (void)mouseDown:(id)arg1;
- (BOOL)isOpaque;
- (BOOL)isMovableByWindowBackground;
- (void)awakeFromNib;
- (id)initWithContentRect:(struct CGRect)arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4;

@end

@interface SUConvertImageController : NSObject
{
    SUBaseProgressSheet *_progressSheet;
    SUSaveImageDiskImagePane *_saveSheet;
    NSURL *_fileToConvertURL;
    CDUnknownBlockType _completionHandler;
}

@property(copy) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(retain) NSURL *fileToConvertURL; // @synthesize fileToConvertURL=_fileToConvertURL;
@property(retain) SUSaveImageDiskImagePane *saveSheet; // @synthesize saveSheet=_saveSheet;
@property(retain) SUBaseProgressSheet *progressSheet; // @synthesize progressSheet=_progressSheet;
- (void).cxx_destruct;
- (void)_reportConvertProgress:(double)arg1;
- (void)_reportVerifyProgress:(double)arg1;
- (void)_reportProgressMessage:(id)arg1;
- (void)_convertImage;
- (void)showWindowWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;

@end

@interface SURAIDDeleteSheetController : NSWindowController <NSTableViewDataSource>
{
    NSWindow *_parentWindow;
    SKRAIDDisk *_targetDisk;
    SUBaseProgressSheet *_progressSheet;
    CDUnknownBlockType _completionHandler;
}

@property(copy) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(retain) SUBaseProgressSheet *progressSheet; // @synthesize progressSheet=_progressSheet;
@property(retain) SKRAIDDisk *targetDisk; // @synthesize targetDisk=_targetDisk;
@property __weak NSWindow *parentWindow; // @synthesize parentWindow=_parentWindow;
- (void).cxx_destruct;
- (void)_runDeleteRAID;
- (void)showWindowWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)showWindow:(id)arg1;
- (void)windowDidLoad;
- (id)initWithTargetDisk:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUColoredBackgroundView : NSView
{
    BOOL _bordered;
    NSColor *_backgroundColor;
}

@property BOOL bordered; // @synthesize bordered=_bordered;
@property(retain) NSColor *backgroundColor; // @synthesize backgroundColor=_backgroundColor;
- (void).cxx_destruct;
- (BOOL)isOpaque;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface SUChooseRAIDTypeController : SURAIDAssistantPaneController
{
    int _selectedType;
    NSButton *_stripedButton;
    NSButton *_mirroredButton;
    NSButton *_jbodButton;
}

@property __weak NSButton *jbodButton; // @synthesize jbodButton=_jbodButton;
@property __weak NSButton *mirroredButton; // @synthesize mirroredButton=_mirroredButton;
@property __weak NSButton *stripedButton; // @synthesize stripedButton=_stripedButton;
@property int selectedType; // @synthesize selectedType=_selectedType;
- (void).cxx_destruct;
- (void)jbodButtonClicked:(id)arg1;
- (void)mirroredButtonClicked:(id)arg1;
- (void)stripedButtonClicked:(id)arg1;
- (id)paneIdentifier;
- (id)title;
- (void)viewDidLoad;
- (id)init;

@end

@interface SUError : NSError
{
    long long _underlyingErrorCode;
}

+ (id)errorWithCode:(int)arg1 localizedFailureReason:(id)arg2 localizedDescription:(id)arg3;
+ (id)errorWithCode:(int)arg1 userInfo:(id)arg2;
@property long long underlyingErrorCode; // @synthesize underlyingErrorCode=_underlyingErrorCode;

@end

@interface SUDiskTableCellView : NSTableCellView
{
    NSButton *_accessoryButton;
}

@property NSButton *accessoryButton; // @synthesize accessoryButton=_accessoryButton;

@end

@interface SURAIDWorkspaceViewController : SUVolumeWorkspaceViewController <NSTableViewDataSource>
{
    SURAIDInfoController *_raidInfoController;
    NSView *_raidInfoContainerView;
}

@property __weak NSView *raidInfoContainerView; // @synthesize raidInfoContainerView=_raidInfoContainerView;
@property(retain) SURAIDInfoController *raidInfoController; // @synthesize raidInfoController=_raidInfoController;
- (void).cxx_destruct;
- (void)viewDidLoad;
- (id)initWithDisk:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(retain) SKRAIDDisk *disk; // @dynamic disk;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUSaveNewDiskImagePane : NSObject <NSTextFieldDelegate>
{
    BOOL _userChangedFormat;
    BOOL _userChangedLayout;
    BOOL _userChangedEncryption;
    BOOL _allowArbitrarySize;
    NSString *_password;
    NSString *_passwordHint;
    NSSavePanel *_savePanel;
    NSTextField *_volumeNameTextField;
    NSTextField *_customSizeField;
    NSPopUpButton *_sizePopupButton;
    NSPopUpButton *_volumeFormatPopup;
    NSPopUpButton *_encryptionFormatPopup;
    NSPopUpButton *_layoutPopup;
    NSPopUpButton *_imageTypePopup;
    NSView *_view;
    NSArray *_topLevelObjects;
    NSDictionary *_createSupportDictionary;
    unsigned long long _minimumFilesystemSize;
    SUPasswordEntryDialog *_passwordEntrySheet;
}

+ (id)savePanel;
@property(retain) SUPasswordEntryDialog *passwordEntrySheet; // @synthesize passwordEntrySheet=_passwordEntrySheet;
@property unsigned long long minimumFilesystemSize; // @synthesize minimumFilesystemSize=_minimumFilesystemSize;
@property BOOL allowArbitrarySize; // @synthesize allowArbitrarySize=_allowArbitrarySize;
@property BOOL userChangedEncryption; // @synthesize userChangedEncryption=_userChangedEncryption;
@property BOOL userChangedLayout; // @synthesize userChangedLayout=_userChangedLayout;
@property BOOL userChangedFormat; // @synthesize userChangedFormat=_userChangedFormat;
@property(retain) NSDictionary *createSupportDictionary; // @synthesize createSupportDictionary=_createSupportDictionary;
@property(retain) NSArray *topLevelObjects; // @synthesize topLevelObjects=_topLevelObjects;
@property(retain) NSView *view; // @synthesize view=_view;
@property __weak NSPopUpButton *imageTypePopup; // @synthesize imageTypePopup=_imageTypePopup;
@property __weak NSPopUpButton *layoutPopup; // @synthesize layoutPopup=_layoutPopup;
@property __weak NSPopUpButton *encryptionFormatPopup; // @synthesize encryptionFormatPopup=_encryptionFormatPopup;
@property __weak NSPopUpButton *volumeFormatPopup; // @synthesize volumeFormatPopup=_volumeFormatPopup;
@property __weak NSPopUpButton *sizePopupButton; // @synthesize sizePopupButton=_sizePopupButton;
@property(retain) NSTextField *customSizeField; // @synthesize customSizeField=_customSizeField;
@property __weak NSTextField *volumeNameTextField; // @synthesize volumeNameTextField=_volumeNameTextField;
@property(retain) NSSavePanel *savePanel; // @synthesize savePanel=_savePanel;
@property(retain) NSString *passwordHint; // @synthesize passwordHint=_passwordHint;
@property(retain) NSString *password; // @synthesize password=_password;
- (void).cxx_destruct;
- (id)imageTypeDictionary;
- (id)layoutPluginDictionary;
- (id)encryptionDictionary;
- (id)filesystem;
- (id)diskImageSize;
- (id)volumeName;
- (id)URL;
- (BOOL)control:(id)arg1 isValidObject:(id)arg2;
- (void)imageTypeChanged:(id)arg1;
- (void)formatTypeChanged:(id)arg1;
- (void)partitionMapTypeChanged:(id)arg1;
- (void)encryptionTypeChanged:(id)arg1;
- (void)beginSheetModalForWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)_addPartitionMapsToPopup;
- (void)_addEncryptionFromatFromDictionary:(id)arg1;
- (void)_addImageFormatsToMenuFromArray:(id)arg1;
- (void)_updateFormatMenu;
- (void)_evaluateCreateRules;
- (void)_selectFormatOfType:(id)arg1;
- (void)_selectPartitionMapOfType:(id)arg1;
- (void)_selectEncryptionOfType:(id)arg1;
- (void)_selectDefaults;
- (void)_populateView;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUSelectDisksPaneController : SURAIDAssistantPaneController <NSTableViewDataSource, NSTableViewDelegate>
{
    int _raidType;
    NSView *_containerView;
    NSView *_noDisksContainerView;
    NSView *_diskContainerView;
    NSTableView *_diskTableView;
    NSTextField *_usageHeader;
    unsigned long long _addKind;
    NSWindow *_parentWindow;
    NSString *_targetRAIDSetName;
    SUSelectPaneDiskSource *_diskSource;
}

@property(retain) SUSelectPaneDiskSource *diskSource; // @synthesize diskSource=_diskSource;
@property(copy) NSString *targetRAIDSetName; // @synthesize targetRAIDSetName=_targetRAIDSetName;
@property __weak NSWindow *parentWindow; // @synthesize parentWindow=_parentWindow;
@property unsigned long long addKind; // @synthesize addKind=_addKind;
@property int raidType; // @synthesize raidType=_raidType;
@property __weak NSTextField *usageHeader; // @synthesize usageHeader=_usageHeader;
@property __weak NSTableView *diskTableView; // @synthesize diskTableView=_diskTableView;
@property __weak NSView *diskContainerView; // @synthesize diskContainerView=_diskContainerView;
@property __weak NSView *noDisksContainerView; // @synthesize noDisksContainerView=_noDisksContainerView;
@property __weak NSView *containerView; // @synthesize containerView=_containerView;
- (void).cxx_destruct;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)viewWillDisappear;
- (void)viewWillAppear;
- (id)selectedDisks;
- (void)tableViewSelectionDidChange:(id)arg1;
- (BOOL)tableView:(id)arg1 shouldSelectRow:(long long)arg2;
- (id)tableView:(id)arg1 viewForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)rolePopUpChanged:(id)arg1;
- (void)RAIDItemClicked:(id)arg1;
- (void)_validateItemControls;
- (void)_validateNextButtonBasedOnDisks;
- (id)title;
- (void)viewDidLoad;
- (BOOL)isSelectOne;
- (id)initWithRAIDType:(int)arg1 parentWindow:(id)arg2;
- (id)initWithRAIDType:(int)arg1 addKind:(unsigned long long)arg2 targetRAIDSet:(id)arg3 parentWindow:(id)arg4;
- (id)paneIdentifier;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUDiskUsageView : NSView
{
    NSArray *usageNameArray;
    NSArray *usageOrderArray;
    NSDictionary *usageDictionary;
    struct CGSize calculatedSize;
    NSArray *_itemColorArray;
    NSArray *_itemBorderColorArray;
}

+ (id)_defaultColorsFromSet:(const double *)arg1 withCount:(unsigned long long)arg2 lastColorWhite:(BOOL)arg3;
+ (id)defaultBorderColorsWithCount:(unsigned long long)arg1 lastColorWhite:(BOOL)arg2;
+ (id)defaultColorsWithCount:(unsigned long long)arg1 lastColorWhite:(BOOL)arg2;
+ (id)defaultUsageOrder;
+ (BOOL)requiresConstraintBasedLayout;
@property(retain) NSArray *itemBorderColorArray; // @synthesize itemBorderColorArray=_itemBorderColorArray;
@property(retain) NSArray *itemColorArray; // @synthesize itemColorArray=_itemColorArray;
- (void).cxx_destruct;
- (void)_makeTextFieldLabel:(id)arg1 isTopLabel:(BOOL)arg2;
- (void)_rebuildPropertyLabels;
- (struct CGSize)fittingSize;
- (struct CGSize)intrinsicContentSize;
- (void)drawRect:(struct CGRect)arg1;
- (void)setUsageDictionary:(id)arg1 order:(id)arg2 names:(id)arg3;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface SUCreateRAIDProgressController : SURAIDAssistantPaneController
{
    int _raidType;
    NSProgressIndicator *_progressBar;
    NSTextField *_statusMessage;
    NSArray *_selectedDisks;
    NSString *_name;
    SKFilesystem *_filesystem;
    NSDictionary *_options;
    CDUnknownBlockType _compeletionBlock;
    NSString *_lastProgressString;
}

@property(retain) NSString *lastProgressString; // @synthesize lastProgressString=_lastProgressString;
@property(copy) CDUnknownBlockType compeletionBlock; // @synthesize compeletionBlock=_compeletionBlock;
@property(retain) NSDictionary *options; // @synthesize options=_options;
@property(retain) SKFilesystem *filesystem; // @synthesize filesystem=_filesystem;
@property(retain) NSString *name; // @synthesize name=_name;
@property(retain) NSArray *selectedDisks; // @synthesize selectedDisks=_selectedDisks;
@property int raidType; // @synthesize raidType=_raidType;
@property __weak NSTextField *statusMessage; // @synthesize statusMessage=_statusMessage;
@property __weak NSProgressIndicator *progressBar; // @synthesize progressBar=_progressBar;
- (void).cxx_destruct;
- (void)completeOperationWithError:(id)arg1;
- (void)completeOperationWithDisk:(id)arg1;
- (id)title;
- (void)viewDidLoad;
- (id)initWithDisks:(id)arg1 name:(id)arg2 raidType:(int)arg3 filesystem:(id)arg4 options:(id)arg5 callback:(CDUnknownBlockType)arg6;
- (id)paneIdentifier;

@end

/* HERE ?? */

@interface SUWorkspaceController : NSObject
{
    SKDisk *representedDisk;
    SUSidebarController *_sidebarController;
    SUWindow *_mainWindow;
    NSView *_workspaceViewContainer;
    SUSharedActionController *_actionController;
    SUWorkspaceViewController *_viewController;
}

@property(retain) SUWorkspaceViewController *viewController; // @synthesize viewController=_viewController;
@property __weak SUSharedActionController *actionController; // @synthesize actionController=_actionController;
@property __weak NSView *workspaceViewContainer; // @synthesize workspaceViewContainer=_workspaceViewContainer;
@property __weak SUWindow *mainWindow; // @synthesize mainWindow=_mainWindow;
@property __weak SUSidebarController *sidebarController; // @synthesize sidebarController=_sidebarController;
- (void).cxx_destruct;
- (void)setRepresentedDisk:(id)arg1;
- (id)representedDisk;
- (void)updateViewBasedOnSelection;
- (void)awakeFromNib;
- (void)dealloc;
- (id)init;

@end

@interface SUSelectPaneDiskSource : NSObject <SKManagerListener>
{
    SKRAIDDisk *_targetRAIDSet;
    NSMutableArray *_selectableDisks;
    NSMutableArray *_selectedDisks;
    unsigned long long _role;
    NSMutableArray *_allDisks;
}

@property(retain) NSMutableArray *allDisks; // @synthesize allDisks=_allDisks;
@property unsigned long long role; // @synthesize role=_role;
@property(retain) NSMutableArray *selectedDisks; // @synthesize selectedDisks=_selectedDisks;
@property(retain) NSMutableArray *selectableDisks; // @synthesize selectableDisks=_selectableDisks;
@property(retain) SKRAIDDisk *targetRAIDSet; // @synthesize targetRAIDSet=_targetRAIDSet;
- (void).cxx_destruct;
- (BOOL)shouldAddDisk:(id)arg1;
- (void)disksDisappeared:(id)arg1;
- (void)deselectDisks:(id)arg1;
- (void)selectDisks:(id)arg1;
- (void)selectDisk:(id)arg1;
- (void)disksAppeared:(id)arg1;
- (id)visibleDiskRoles;
- (void)dealloc;
- (id)initWithTargetRAIDSet:(id)arg1 forRole:(unsigned long long)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUImageSheetController : NSWindowController <NSTableViewDataSource>
{
    NSWindow *_parentWindow;
    SKDisk *_targetDisk;
    SUBaseProgressSheet *_progressSheet;
    NSView *_accessoryView;
    NSPopUpButton *_formatPopup;
    NSPopUpButton *_encryptionPopup;
}

@property __weak NSPopUpButton *encryptionPopup; // @synthesize encryptionPopup=_encryptionPopup;
@property __weak NSPopUpButton *formatPopup; // @synthesize formatPopup=_formatPopup;
@property __weak NSView *accessoryView; // @synthesize accessoryView=_accessoryView;
@property(retain) SUBaseProgressSheet *progressSheet; // @synthesize progressSheet=_progressSheet;
@property(retain) SKDisk *targetDisk; // @synthesize targetDisk=_targetDisk;
@property(retain) NSWindow *parentWindow; // @synthesize parentWindow=_parentWindow;
- (void).cxx_destruct;
- (id)_encryptionTypes;
- (id)_diskImageFormats;
- (void)_imageProgressWithDictionary:(id)arg1;
- (id)imageDiskToFile:(id)arg1 ofType:(id)arg2 withEncryption:(id)arg3;
- (id)diskAtURLIsValidForSave:(id)arg1;
- (void)showWindowWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)windowDidLoad;
- (id)initWithTargetDisk:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SURAIDPropertiesController : SURAIDAssistantPaneController
{
    int _raidType;
    NSTextField *_usageHeader;
    NSTextField *_raidNameTextField;
    NSPopUpButton *_formatPopup;
    NSTextField *_typeField;
    NSTextField *_capacityField;
    NSArray *_disks;
    NSPopUpButton *_chunkSizePopup;
    unsigned long long _chunkSize;
    NSButton *_mirrorRebuildAutomatically;
}

@property __weak NSButton *mirrorRebuildAutomatically; // @synthesize mirrorRebuildAutomatically=_mirrorRebuildAutomatically;
@property unsigned long long chunkSize; // @synthesize chunkSize=_chunkSize;
@property __weak NSPopUpButton *chunkSizePopup; // @synthesize chunkSizePopup=_chunkSizePopup;
@property(retain) NSArray *disks; // @synthesize disks=_disks;
@property int raidType; // @synthesize raidType=_raidType;
@property __weak NSTextField *capacityField; // @synthesize capacityField=_capacityField;
@property __weak NSTextField *typeField; // @synthesize typeField=_typeField;
@property __weak NSPopUpButton *formatPopup; // @synthesize formatPopup=_formatPopup;
@property __weak NSTextField *raidNameTextField; // @synthesize raidNameTextField=_raidNameTextField;
@property __weak NSTextField *usageHeader; // @synthesize usageHeader=_usageHeader;
- (void).cxx_destruct;
- (id)selectedFormat;
- (BOOL)rebuildMirrorsAutomatically;
- (unsigned long long)raidChunkSize;
- (id)RAIDName;
- (void)updateRAIDCapacity;
- (void)selectChunksizeMenuItem;
- (void)chunkSizeChanged:(id)arg1;
- (void)viewDidLoad;
- (id)title;
- (id)initWithRAIDType:(int)arg1 disks:(id)arg2;
- (id)paneIdentifier;

@end

@interface SUVerifyImageController : NSObject
{
    SUBaseProgressSheet *_progressSheet;
}

@property(retain) SUBaseProgressSheet *progressSheet; // @synthesize progressSheet=_progressSheet;
- (void).cxx_destruct;
- (void)_reportProgress:(double)arg1;
- (void)_reportProgressMessage:(id)arg1;
- (void)_verifyImageAtURL:(id)arg1;
- (void)showWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;

@end

@interface SUFileDropablePopup : NSPopUpButton <NSDraggingDestination>
{
    NSObject<SUFileDropablePopupDropDelegate> *_delegate;
    NSString *_validUTI;
}

@property(retain) NSString *validUTI; // @synthesize validUTI=_validUTI;
@property __weak NSObject<SUFileDropablePopupDropDelegate> *delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (id)_diskImageURLFromPasteBoard:(id)arg1;
- (void)draggingExited:(id)arg1;
- (void)concludeDragOperation:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (id)initWithCoder:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SURAIDSelectAddMembersSheetController : NSWindowController <NSWindowDelegate>
{
    int _raidType;
    NSTextField *_title;
    NSButton *_nextButton;
    NSButton *_cancelButton;
    SURAIDBackgroundColorView *_viewContainer;
    SURAIDAssistantPaneController *_paneController;
    NSWindow *_parentWindow;
    SKRAIDDisk *_targetDisk;
    unsigned long long _addKind;
    NSArray *_selectedDisks;
    SURAIDAddMemberSheetController *_addMemberSheet;
}

@property(retain) SURAIDAddMemberSheetController *addMemberSheet; // @synthesize addMemberSheet=_addMemberSheet;
@property(retain) NSArray *selectedDisks; // @synthesize selectedDisks=_selectedDisks;
@property unsigned long long addKind; // @synthesize addKind=_addKind;
@property(retain) SKRAIDDisk *targetDisk; // @synthesize targetDisk=_targetDisk;
@property(retain) NSWindow *parentWindow; // @synthesize parentWindow=_parentWindow;
@property int raidType; // @synthesize raidType=_raidType;
@property(retain) SURAIDAssistantPaneController *paneController; // @synthesize paneController=_paneController;
@property __weak SURAIDBackgroundColorView *viewContainer; // @synthesize viewContainer=_viewContainer;
@property __weak NSButton *cancelButton; // @synthesize cancelButton=_cancelButton;
@property __weak NSButton *nextButton; // @synthesize nextButton=_nextButton;
@property __weak NSTextField *title; // @synthesize title=_title;
- (void).cxx_destruct;
- (void)nextClicked:(id)arg1;
- (void)cancelClicked:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_goToPaneController:(id)arg1;
- (void)showWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (void)windowDidLoad;
- (id)initWithTargetDisk:(id)arg1 addKind:(unsigned long long)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUInfoTableView : NSView
{
    NSMutableArray *labelViews;
    NSMutableArray *valueViews;
    struct CGSize calculatedSize;
    SUDiskInfo *diskInfo;
}

+ (BOOL)requiresConstraintBasedLayout;
- (void).cxx_destruct;
- (id)_valueForItem:(long long)arg1;
- (id)_labelForItem:(long long)arg1;
- (void)reloadData;
- (void)drawRect:(struct CGRect)arg1;
- (void)setDiskInfo:(id)arg1;
- (id)_constraintsEffectingView:(id)arg1;
- (void)_setLabelPropertiesOnTextField:(id)arg1 isValue:(BOOL)arg2;
- (void)_calculateIntrinsicSize;
- (void)_addLabels;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface SUPartitionChartView : NSView <NSAccessibilityGroup, NSAccessibility>
{
    BOOL _isMouseDownInBottomHandle;
    BOOL _isMouseDownInTopHandle;
    BOOL _isMouseDownSplitting;
    BOOL _isEditingSliceDrawAtMinimumSize;
    BOOL _isDraggingBottomHandle;
    BOOL _isDraggingTopHandle;
    BOOL _showAllMinimumSizes;
    NSObject<SUPartitionChartViewDelegate> *_delegate;
    NSPopover *_verySmallDiskPopover;
    SUPartitionModelController *_model;
    NSMutableArray *_visualModel;
    unsigned long long _totalSize;
    SUPieSlice *_selectedSlice;
    long long _lastPopoverPartition;
    unsigned long long _lastPopoverEdge;
    NSMutableArray *_pieSliceAccessibilityElements;
    double _denormalizedPercentage;
}

@property BOOL showAllMinimumSizes; // @synthesize showAllMinimumSizes=_showAllMinimumSizes;
@property BOOL isDraggingTopHandle; // @synthesize isDraggingTopHandle=_isDraggingTopHandle;
@property BOOL isDraggingBottomHandle; // @synthesize isDraggingBottomHandle=_isDraggingBottomHandle;
@property BOOL isEditingSliceDrawAtMinimumSize; // @synthesize isEditingSliceDrawAtMinimumSize=_isEditingSliceDrawAtMinimumSize;
@property BOOL isMouseDownSplitting; // @synthesize isMouseDownSplitting=_isMouseDownSplitting;
@property BOOL isMouseDownInTopHandle; // @synthesize isMouseDownInTopHandle=_isMouseDownInTopHandle;
@property BOOL isMouseDownInBottomHandle; // @synthesize isMouseDownInBottomHandle=_isMouseDownInBottomHandle;
@property double denormalizedPercentage; // @synthesize denormalizedPercentage=_denormalizedPercentage;
@property(retain) NSMutableArray *pieSliceAccessibilityElements; // @synthesize pieSliceAccessibilityElements=_pieSliceAccessibilityElements;
@property unsigned long long lastPopoverEdge; // @synthesize lastPopoverEdge=_lastPopoverEdge;
@property long long lastPopoverPartition; // @synthesize lastPopoverPartition=_lastPopoverPartition;
@property(retain) SUPieSlice *selectedSlice; // @synthesize selectedSlice=_selectedSlice;
@property unsigned long long totalSize; // @synthesize totalSize=_totalSize;
@property(retain) NSMutableArray *visualModel; // @synthesize visualModel=_visualModel;
@property(retain) SUPartitionModelController *model; // @synthesize model=_model;
@property(retain) NSPopover *verySmallDiskPopover; // @synthesize verySmallDiskPopover=_verySmallDiskPopover;
@property __weak NSObject<SUPartitionChartViewDelegate> *delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
@property(copy) NSArray *accessibilityChildren;
@property(copy) NSString *accessibilityLabel;
- (void)_buildAccessibilityElements;
- (void)layout;
- (void)setFrame:(struct CGRect)arg1;
- (void)_clearSelection;
- (double)_updateInfoFields:(id)arg1 minimumRadiusPercentage:(double)arg2;
- (void)_updateInfoFieldColors:(id)arg1;
- (void)_updateInfoFields:(id)arg1;
- (void)_updateAllSliceInfoFields;
- (BOOL)_isTextFieldRect:(struct CGRect)arg1 atPoint:(struct CGPoint)arg2 clippedInSlice:(id)arg3;
- (void)_computeVisualModelWhileEditingPartition:(id)arg1 andPartition:(id)arg2;
- (void)_computeVisualModel;
- (void)_modelUpdated:(id)arg1;
- (struct CGRect)_dragHandleRectFromPoint:(struct CGPoint)arg1;
- (struct CGPoint)_pointOnCircleAtNormalizedPercent:(double)arg1;
- (double)_degreesForNormalizedPercentage:(double)arg1;
- (struct CGPoint)_infoPointForPartitionAtPercentage:(double)arg1 radiusPercentage:(double)arg2;
- (void)drawRect:(struct CGRect)arg1;
- (long long)_partitionForPercentage:(double)arg1;
- (double)_normalizedPercentageAtPoint:(struct CGPoint)arg1 isInRange:(char *)arg2;
- (double)_normalizedPercentageAtPoint:(struct CGPoint)arg1;
- (double)_normalizedPercentageClicked:(id)arg1 isInRange:(char *)arg2;
- (double)_distanceFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2;
- (BOOL)_processDragHandlesWithEvent:(id)arg1;
- (void)_handleDraggingOfPartition:(id)arg1 nextPartition:(id)arg2 withNormalizedDegrees:(double)arg3;
- (void)mouseDragged:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseMoved:(id)arg1;
- (void)keyDown:(id)arg1;
- (BOOL)performKeyEquivalent:(id)arg1;
- (void)selectPreviousPartition;
- (void)selectNextPartition;
- (BOOL)resignFirstResponder;
- (BOOL)becomeFirstResponder;
- (void)flagsChanged:(id)arg1;
- (BOOL)isDrawAtMinimumSizePartitionAtIndex:(long long)arg1;
- (BOOL)isTransientPartitionAtIndex:(long long)arg1;
- (void)setPartitionAtIndex:(long long)arg1 isTransient:(BOOL)arg2;
- (void)clearTransientSelection;
- (void)setPartitionModel:(id)arg1;
- (long long)selectedPartitionIndex;
- (void)selectPartitionAtIndex:(long long)arg1;
- (struct CGRect)circleRect;
- (double)chartRadius;
- (double)chartDiameter;
- (BOOL)acceptsFirstResponder;
- (id)initWithFrame:(struct CGRect)arg1;

// Remaining properties
@property struct CGPoint accessibilityActivationPoint;
@property(copy) NSArray *accessibilityAllowedValues;
@property(getter=isAccessibilityAlternateUIVisible) BOOL accessibilityAlternateUIVisible;
@property(retain) id accessibilityApplicationFocusedUIElement;
@property(retain) id accessibilityCancelButton;
@property(retain) id accessibilityClearButton;
@property(retain) id accessibilityCloseButton;
@property long long accessibilityColumnCount;
@property(copy) NSArray *accessibilityColumnHeaderUIElements;
@property struct _NSRange accessibilityColumnIndexRange;
@property(copy) NSArray *accessibilityColumnTitles;
@property(copy) NSArray *accessibilityColumns;
@property(copy) NSArray *accessibilityContents;
@property(retain) id accessibilityCriticalValue;
@property(retain) id accessibilityDecrementButton;
@property(retain) id accessibilityDefaultButton;
@property(getter=isAccessibilityDisclosed) BOOL accessibilityDisclosed;
@property __weak id accessibilityDisclosedByRow;
@property(retain) id accessibilityDisclosedRows;
@property long long accessibilityDisclosureLevel;
@property(copy) NSString *accessibilityDocument;
@property(getter=isAccessibilityEdited) BOOL accessibilityEdited;
@property(getter=isAccessibilityElement) BOOL accessibilityElement;
@property(getter=isAccessibilityEnabled) BOOL accessibilityEnabled;
@property(getter=isAccessibilityExpanded) BOOL accessibilityExpanded;
@property __weak id accessibilityExtrasMenuBar;
@property(copy) NSString *accessibilityFilename;
@property(getter=isAccessibilityFocused) BOOL accessibilityFocused;
@property(retain) id accessibilityFocusedWindow;
@property struct CGRect accessibilityFrame;
@property(getter=isAccessibilityFrontmost) BOOL accessibilityFrontmost;
@property(retain) id accessibilityFullScreenButton;
@property(retain) id accessibilityGrowArea;
@property(copy) NSArray *accessibilityHandles;
@property(retain) id accessibilityHeader;
@property(copy) NSString *accessibilityHelp;
@property(getter=isAccessibilityHidden) BOOL accessibilityHidden;
@property(retain) id accessibilityHorizontalScrollBar;
@property(copy) NSString *accessibilityHorizontalUnitDescription;
@property long long accessibilityHorizontalUnits;
@property(copy) NSString *accessibilityIdentifier;
@property(retain) id accessibilityIncrementButton;
@property long long accessibilityIndex;
@property long long accessibilityInsertionPointLineNumber;
@property(copy) NSArray *accessibilityLabelUIElements;
@property float accessibilityLabelValue;
@property(copy) NSArray *accessibilityLinkedUIElements;
@property(getter=isAccessibilityMain) BOOL accessibilityMain;
@property(retain) id accessibilityMainWindow;
@property(retain) id accessibilityMarkerGroupUIElement;
@property(copy) NSString *accessibilityMarkerTypeDescription;
@property(copy) NSArray *accessibilityMarkerUIElements;
@property(retain) id accessibilityMarkerValues;
@property(retain) id accessibilityMaxValue;
@property __weak id accessibilityMenuBar;
@property(retain) id accessibilityMinValue;
@property(retain) id accessibilityMinimizeButton;
@property(getter=isAccessibilityMinimized) BOOL accessibilityMinimized;
@property(getter=isAccessibilityModal) BOOL accessibilityModal;
@property(copy) NSArray *accessibilityNextContents;
@property long long accessibilityNumberOfCharacters;
@property(getter=isAccessibilityOrderedByRow) BOOL accessibilityOrderedByRow;
@property long long accessibilityOrientation;
@property(retain) id accessibilityOverflowButton;
@property __weak id accessibilityParent;
@property(copy) NSString *accessibilityPlaceholderValue;
@property(copy) NSArray *accessibilityPreviousContents;
@property(getter=isAccessibilityProtectedContent) BOOL accessibilityProtectedContent;
@property(retain) id accessibilityProxy;
@property(getter=isAccessibilityRequired) BOOL accessibilityRequired;
@property(copy) NSString *accessibilityRole;
@property(copy) NSString *accessibilityRoleDescription;
@property long long accessibilityRowCount;
@property(copy) NSArray *accessibilityRowHeaderUIElements;
@property struct _NSRange accessibilityRowIndexRange;
@property(copy) NSArray *accessibilityRows;
@property long long accessibilityRulerMarkerType;
@property(retain) id accessibilitySearchButton;
@property(retain) id accessibilitySearchMenu;
@property(getter=isAccessibilitySelected) BOOL accessibilitySelected;
@property(copy) NSArray *accessibilitySelectedCells;
@property(copy) NSArray *accessibilitySelectedChildren;
@property(copy) NSArray *accessibilitySelectedColumns;
@property(copy) NSArray *accessibilitySelectedRows;
@property(copy) NSString *accessibilitySelectedText;
@property struct _NSRange accessibilitySelectedTextRange;
@property(copy) NSArray *accessibilitySelectedTextRanges;
@property(copy) NSArray *accessibilityServesAsTitleForUIElements;
@property struct _NSRange accessibilitySharedCharacterRange;
@property(copy) NSArray *accessibilitySharedFocusElements;
@property(copy) NSArray *accessibilitySharedTextUIElements;
@property(retain) id accessibilityShownMenu;
@property long long accessibilitySortDirection;
@property(copy) NSArray *accessibilitySplitters;
@property(copy) NSString *accessibilitySubrole;
@property(copy) NSArray *accessibilityTabs;
@property(copy) NSString *accessibilityTitle;
@property __weak id accessibilityTitleUIElement;
@property(retain) id accessibilityToolbarButton;
@property __weak id accessibilityTopLevelUIElement;
@property(copy) NSURL *accessibilityURL;
@property(copy) NSString *accessibilityUnitDescription;
@property long long accessibilityUnits;
@property(retain) id accessibilityValue;
@property(copy) NSString *accessibilityValueDescription;
@property(retain) id accessibilityVerticalScrollBar;
@property(copy) NSString *accessibilityVerticalUnitDescription;
@property long long accessibilityVerticalUnits;
@property(copy) NSArray *accessibilityVisibleCells;
@property struct _NSRange accessibilityVisibleCharacterRange;
@property(copy) NSArray *accessibilityVisibleChildren;
@property(copy) NSArray *accessibilityVisibleColumns;
@property(copy) NSArray *accessibilityVisibleRows;
@property(retain) id accessibilityWarningValue;
@property __weak id accessibilityWindow;
@property(copy) NSArray *accessibilityWindows;
@property(retain) id accessibilityZoomButton;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUFinishedRAIDController : SURAIDAssistantPaneController
{
    NSString *_resultString;
    NSTextField *_successFailureLine;
    NSTextField *_failureReason;
    NSImageView *_completeIcon;
}

@property __weak NSImageView *completeIcon; // @synthesize completeIcon=_completeIcon;
@property __weak NSTextField *failureReason; // @synthesize failureReason=_failureReason;
@property __weak NSTextField *successFailureLine; // @synthesize successFailureLine=_successFailureLine;
@property(retain) NSString *resultString; // @synthesize resultString=_resultString;
- (void).cxx_destruct;
- (id)title;
- (void)viewDidLoad;
- (id)paneIdentifier;
- (id)initWithResultString:(id)arg1;

@end

@interface SUEmptyWorkspaceViewController : SUWorkspaceViewController
{
    NSProgressIndicator *_spinner;
}

@property __weak NSProgressIndicator *spinner; // @synthesize spinner=_spinner;
- (void).cxx_destruct;
- (void)viewDidLoad;
- (id)initWithDisk:(id)arg1;

@end

@interface SUByteCountFormatter : NSByteCountFormatter
{
}

- (BOOL)isPartialStringValid:(id *)arg1 proposedSelectedRange:(struct _NSRange *)arg2 originalString:(id)arg3 originalSelectedRange:(struct _NSRange)arg4 errorDescription:(id *)arg5;
- (BOOL)isPartialStringValid:(id)arg1 newEditingString:(id *)arg2 errorDescription:(id *)arg3;
- (BOOL)getObjectValue:(out id *)arg1 forString:(id)arg2 errorDescription:(out id *)arg3;
- (id)editingStringForObjectValue:(id)arg1;

@end

@interface SUInfoWindowController : NSWindowController <NSTableViewDataSource, NSTableViewDelegate, NSWindowDelegate>
{
    NSTableView *_tableView;
    NSScrollView *_scrollView;
    NSProgressIndicator *_progressSpinner;
    SKDisk *_representedDisk;
    NSMutableArray *_labelArray;
    NSMutableArray *_valueArray;
}

+ (id)infoWindowControllerForDisk:(id)arg1;
@property(retain) NSMutableArray *valueArray; // @synthesize valueArray=_valueArray;
@property(retain) NSMutableArray *labelArray; // @synthesize labelArray=_labelArray;
@property(retain) SKDisk *representedDisk; // @synthesize representedDisk=_representedDisk;
@property __weak NSProgressIndicator *progressSpinner; // @synthesize progressSpinner=_progressSpinner;
@property __weak NSScrollView *scrollView; // @synthesize scrollView=_scrollView;
@property __weak NSTableView *tableView; // @synthesize tableView=_tableView;
- (void).cxx_destruct;
- (void)copy:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)windowWillClose:(id)arg1;
- (BOOL)window:(id)arg1 shouldPopUpDocumentPathMenu:(id)arg2;
- (id)_translateVolumeType:(id)arg1;
- (id)_translateValue:(id)arg1 forKey:(id)arg2;
- (id)_constantTranslateKeys;
- (id)_booleanValueKeys;
- (id)_keyToNameMap;
- (id)_sortedKeys;
- (void)_populateWithDictionary:(id)arg1;
- (void)showWindow:(id)arg1;
- (void)windowDidLoad;
- (void)close;
- (id)initWithRepresentedDisk:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SURAIDBackgroundColorView : NSBox
{
    BOOL _drawBorder;
    NSColor *_backgroundColor;
    NSGradient *_backgroundGradient;
    double _gradientAngle;
    NSColor *_horizontalTopDividerColor;
    NSColor *_horizontalBottomDividerColor;
}

@property(copy, nonatomic) NSColor *horizontalBottomDividerColor; // @synthesize horizontalBottomDividerColor=_horizontalBottomDividerColor;
@property(copy, nonatomic) NSColor *horizontalTopDividerColor; // @synthesize horizontalTopDividerColor=_horizontalTopDividerColor;
@property(nonatomic) BOOL drawBorder; // @synthesize drawBorder=_drawBorder;
@property(nonatomic) double gradientAngle; // @synthesize gradientAngle=_gradientAngle;
@property(copy, nonatomic) NSGradient *backgroundGradient; // @synthesize backgroundGradient=_backgroundGradient;
@property(copy, nonatomic) NSColor *backgroundColor; // @synthesize backgroundColor=_backgroundColor;
- (void).cxx_destruct;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)isOpaque;

@end

@interface DUMenuSegmentedCell : NSSegmentedCell
{
}

- (SEL)action;

@end

@interface SURAIDInfoController : NSViewController <NSTableViewDataSource, NSTableViewDelegate>
{
    BOOL _isRAID0;
    BOOL _isRAID1;
    BOOL _isJBOD;
    SKRAIDDisk *_disk;
    id <SKRAIDInfoControllerDelegate> _raidInfoDelegate;
    NSTextField *_headerField;
    NSTableView *_diskTableView;
    NSSegmentedControl *_addRemoveControl;
    NSMenu *_addMenu;
    SURAIDInfoSource *_infoSource;
    SURAIDSelectAddMembersSheetController *_addMembersSheetController;
    SURAIDRemoveMemberSheetController *_removeMemberSheetController;
    SURAIDDeleteSheetController *_deleteRAIDSheetController;
}

@property(retain) SURAIDDeleteSheetController *deleteRAIDSheetController; // @synthesize deleteRAIDSheetController=_deleteRAIDSheetController;
@property(retain) SURAIDRemoveMemberSheetController *removeMemberSheetController; // @synthesize removeMemberSheetController=_removeMemberSheetController;
@property(retain) SURAIDSelectAddMembersSheetController *addMembersSheetController; // @synthesize addMembersSheetController=_addMembersSheetController;
@property BOOL isJBOD; // @synthesize isJBOD=_isJBOD;
@property BOOL isRAID1; // @synthesize isRAID1=_isRAID1;
@property BOOL isRAID0; // @synthesize isRAID0=_isRAID0;
@property(retain) SURAIDInfoSource *infoSource; // @synthesize infoSource=_infoSource;
@property __weak NSMenu *addMenu; // @synthesize addMenu=_addMenu;
@property __weak NSSegmentedControl *addRemoveControl; // @synthesize addRemoveControl=_addRemoveControl;
@property __weak NSTableView *diskTableView; // @synthesize diskTableView=_diskTableView;
@property __weak NSTextField *headerField; // @synthesize headerField=_headerField;
@property __weak id <SKRAIDInfoControllerDelegate> raidInfoDelegate; // @synthesize raidInfoDelegate=_raidInfoDelegate;
@property(retain, nonatomic) SKRAIDDisk *disk; // @synthesize disk=_disk;
- (void).cxx_destruct;
- (void)deleteRAIDClicked:(id)arg1;
- (void)performDeleteRAID:(id)arg1;
- (void)repairRAIDClicked:(id)arg1;
- (void)performRepairSet:(id)arg1;
- (void)addSparesClicked:(id)arg1;
- (void)performAddSparesToSet:(id)arg1;
- (void)removeMemberClicked:(id)arg1;
- (void)performRemoveMember:(id)arg1 fromSet:(id)arg2;
- (void)addMemberClicked:(id)arg1;
- (void)performAddMemberToSet:(id)arg1;
- (void)addRemoveMemberClicked:(id)arg1;
- (void)memberDoubleClicked:(id)arg1;
- (id)selectedMemberDisks;
- (void)tableViewSelectionDidChange:(id)arg1;
- (BOOL)tableView:(id)arg1 isGroupRow:(long long)arg2;
- (id)tableView:(id)arg1 viewForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)updateAddRemoveControl;
- (void)viewDidLoad;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUCreateNewImageController : NSObject
{
    NSWindow *_parent;
    SUSaveNewDiskImagePane *_diskImageSavePanel;
    SUBaseProgressSheet *_progressSheet;
    NSString *_currentPhase;
}

@property(retain) NSString *currentPhase; // @synthesize currentPhase=_currentPhase;
@property(retain) SUBaseProgressSheet *progressSheet; // @synthesize progressSheet=_progressSheet;
@property(retain) SUSaveNewDiskImagePane *diskImageSavePanel; // @synthesize diskImageSavePanel=_diskImageSavePanel;
@property(retain) NSWindow *parent; // @synthesize parent=_parent;
- (void).cxx_destruct;
- (void)newImageProgress:(id)arg1;
- (void)createImage;
- (void)showWindowWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;

@end

@interface SURAIDItemCellView : NSTableCellView
{
    NSButton *_button;
    NSLayoutConstraint *_textLeftHorizontalConstraint;
    id _representedObject;
}

@property __weak id representedObject; // @synthesize representedObject=_representedObject;
@property __weak NSLayoutConstraint *textLeftHorizontalConstraint; // @synthesize textLeftHorizontalConstraint=_textLeftHorizontalConstraint;
@property __weak NSButton *button; // @synthesize button=_button;
- (void).cxx_destruct;
- (void)resetToDefault;
- (void)setCellStyle:(int)arg1;
- (void)stateChanged:(id)arg1;
- (void)awakeFromNib;

@end

@interface SURestoreSourceItem : NSObject
{
    int _type;
    NSString *_name;
    NSImage *_icon;
}

@property int type; // @synthesize type=_type;
@property(retain) NSImage *icon; // @synthesize icon=_icon;
@property(retain) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (id)initWithType:(int)arg1;

@end

@interface SUPartitionSheetController : NSWindowController <NSTableViewDataSource, NSTableViewDelegate, SUPartitionChartViewDelegate, NSTextDelegate, SUPartitionModelApplyDelegate>
{
    NSWindow *_parentWindow;
    SKDisk *_targetDisk;
    SUPartitionModelController *_model;
    SUBaseProgressSheet *_progressSheet;
    NSMenuItem *_unformattableItem;
    NSTextField *_sheetTitle;
    NSImageView *_diskIconView;
    SUPartitionChartView *_chartView;
    NSButton *_revertButton;
    NSButton *_modifyButton;
    NSTextField *_deviceName;
    NSTextField *_partitionMapTypeField;
    NSTextField *_deviceSize;
    NSTextField *_partitionTitle;
    NSPopUpButton *_partitionPopUp;
    NSTextField *_sizeField;
    NSString *_sizeFieldOriginalText;
    NSTextField *_statusField;
    NSSegmentedControl *_addRemoveControl;
    NSPopover *_verySmallDiskPopover;
    SUPasswordEntryDialog *_passwordEntrySheet;
    CDUnknownBlockType _completionHandler;
    long long _selectedPartitionIndex;
    NSMutableArray *_warnedArray;
}

@property(retain) NSMutableArray *warnedArray; // @synthesize warnedArray=_warnedArray;
@property long long selectedPartitionIndex; // @synthesize selectedPartitionIndex=_selectedPartitionIndex;
@property(copy) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(retain) SUPasswordEntryDialog *passwordEntrySheet; // @synthesize passwordEntrySheet=_passwordEntrySheet;
@property __weak NSPopover *verySmallDiskPopover; // @synthesize verySmallDiskPopover=_verySmallDiskPopover;
@property __weak NSSegmentedControl *addRemoveControl; // @synthesize addRemoveControl=_addRemoveControl;
@property __weak NSTextField *statusField; // @synthesize statusField=_statusField;
@property(copy) NSString *sizeFieldOriginalText; // @synthesize sizeFieldOriginalText=_sizeFieldOriginalText;
@property __weak NSTextField *sizeField; // @synthesize sizeField=_sizeField;
@property __weak NSPopUpButton *partitionPopUp; // @synthesize partitionPopUp=_partitionPopUp;
@property __weak NSTextField *partitionTitle; // @synthesize partitionTitle=_partitionTitle;
@property __weak NSTextField *deviceSize; // @synthesize deviceSize=_deviceSize;
@property __weak NSTextField *partitionMapTypeField; // @synthesize partitionMapTypeField=_partitionMapTypeField;
@property __weak NSTextField *deviceName; // @synthesize deviceName=_deviceName;
@property __weak NSButton *modifyButton; // @synthesize modifyButton=_modifyButton;
@property __weak NSButton *revertButton; // @synthesize revertButton=_revertButton;
@property __weak SUPartitionChartView *chartView; // @synthesize chartView=_chartView;
@property __weak NSImageView *diskIconView; // @synthesize diskIconView=_diskIconView;
@property __weak NSTextField *sheetTitle; // @synthesize sheetTitle=_sheetTitle;
@property(retain) NSMenuItem *unformattableItem; // @synthesize unformattableItem=_unformattableItem;
@property(retain) SUBaseProgressSheet *progressSheet; // @synthesize progressSheet=_progressSheet;
@property(retain) SUPartitionModelController *model; // @synthesize model=_model;
@property(retain) SKDisk *targetDisk; // @synthesize targetDisk=_targetDisk;
@property(retain) NSWindow *parentWindow; // @synthesize parentWindow=_parentWindow;
- (void).cxx_destruct;
- (void)applyStatusMessage:(id)arg1;
- (void)applyProgress:(double)arg1;
- (void)applyDidFailWithError:(id)arg1;
- (void)applyDidSucceed;
- (void)_updateViewsBasedOnSelection:(long long)arg1;
- (void)_saveChanges;
- (void)addRemoveParitionClicked:(id)arg1;
- (void)removePartitionClicked:(id)arg1;
- (void)deleteForward:(id)arg1;
- (void)deleteBackward:(id)arg1;
- (void)keyDown:(id)arg1;
- (BOOL)performKeyEquivalent:(id)arg1;
- (void)addPartitionClicked:(id)arg1;
- (void)modelDidChange;
- (void)selectedPartitionNumber:(long long)arg1;
- (void)_updatePartitionInfo:(id)arg1;
- (void)partitionFormatChanged:(id)arg1;
- (void)formatPartition:(BOOL)arg1 popupButton:(id)arg2;
- (void)partitionSizeChanged:(id)arg1;
- (void)partitionNameChanged:(id)arg1;
- (void)controlTextDidEndEditing:(id)arg1;
- (void)partitionClicked:(id)arg1;
- (void)cancelClicked:(id)arg1;
- (void)revertClicked:(id)arg1;
- (void)helpClicked:(id)arg1;
- (void)showWindowWithParentWindow:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)windowDidLoad;
- (id)initWithTargetDisk:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SUToolbar : NSToolbar
{
}

- (BOOL)_allowsSizeMode:(unsigned long long)arg1;

@end

@interface SUDeviceWorkspaceViewController : SUWorkspaceViewController
{
    SUInfoTableView *_infoTable;
    SUDiskUsageView *_usageView;
}

@property __weak SUDiskUsageView *usageView; // @synthesize usageView=_usageView;
@property __weak SUInfoTableView *infoTable; // @synthesize infoTable=_infoTable;
- (void).cxx_destruct;
- (void)viewDidLoad;
- (id)initWithDisk:(id)arg1;

@end

@interface IndicatorImageView : NSImageView
{
    struct CGPoint mSavedOrigin;
    NSTextField *_parent;
}

@property NSTextField *parent; // @synthesize parent=_parent;
- (void)setSavedFrameOrigin:(struct CGPoint)arg1;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface IndicatorTextField : NSTextField
{
    BOOL mShowIndicator;
    IndicatorImageView *mIdicatorImageView;
    NSTextField *mNoteField;
}

+ (id)_indicatorImage;
- (void).cxx_destruct;
- (void)setNoteField:(id)arg1;
- (id)noteField;
- (void)setShowIndicator:(BOOL)arg1 noteString:(id)arg2;
- (void)setShowIndicator:(BOOL)arg1;
- (BOOL)isShowingIndicator;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)becomeFirstResponder;

@end

@interface IndicatorSecureTextField : NSSecureTextField
{
    BOOL mShowIndicator;
    IndicatorImageView *mIdicatorImageView;
    NSTextField *mNoteField;
}

- (void).cxx_destruct;
- (void)setNoteField:(id)arg1;
- (id)noteField;
- (BOOL)becomeFirstResponder;
- (void)setShowIndicator:(BOOL)arg1 noteString:(id)arg2;
- (void)setShowIndicator:(BOOL)arg1;
- (BOOL)isShowingIndicator;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface SURestoreSourceController : NSObject <SKManagerListener, SUFileDropablePopupDropDelegate>
{
    BOOL _allowOnlyWholeMedia;
    NSPopUpButton *_sourceListBox;
    NSButton *_imageButton;
    SKDisk *_targetDisk;
    NSMutableArray *_sourceList;
    NSMenuItem *_emptyMenuItem;
}

@property(retain) NSMenuItem *emptyMenuItem; // @synthesize emptyMenuItem=_emptyMenuItem;
@property(retain) NSMutableArray *sourceList; // @synthesize sourceList=_sourceList;
@property(retain) SKDisk *targetDisk; // @synthesize targetDisk=_targetDisk;
@property BOOL allowOnlyWholeMedia; // @synthesize allowOnlyWholeMedia=_allowOnlyWholeMedia;
@property __weak NSButton *imageButton; // @synthesize imageButton=_imageButton;
@property __weak NSPopUpButton *sourceListBox; // @synthesize sourceListBox=_sourceListBox;
- (void).cxx_destruct;
- (id)visibleDiskRoles;
- (void)_updateList;
- (void)disksDisappeared:(id)arg1;
- (void)disksChanged:(id)arg1;
- (void)disksAppeared:(id)arg1;
- (void)selectionChanged:(id)arg1;
- (void)_updateListWithSelectedDmgURL:(id)arg1;
- (void)selectImageClicked:(id)arg1;
- (void)didDrop:(id)arg1 forPopup:(id)arg2;
- (id)validDropExtensionsForPopup:(id)arg1;
- (id)validDropUTIsForPopup:(id)arg1;
- (id)restoreSource;
- (void)stopListening;
- (void)startListening;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SKManager (SUManagerExtensions)
- (id)_su_sparesForRAIDSet:(id)arg1;
@end

@interface SKRAIDDisk (DURAIDDiskExtensions)
+ (id)_su_UtilitiesDMAppleRAID;
+ (id)_su_UtilitiesDMManager;
@property(readonly) NSNumber *_su_rebuildProgress;
@property(readonly) NSString *_su_RAIDType;
@end

