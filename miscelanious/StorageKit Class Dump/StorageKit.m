//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark -

//
// File: /System/Library/PrivateFrameworks/StorageKit.framework/Versions/A/StorageKit
// UUID: 899A444C-DB89-35CC-A821-53BB02DE3F3D
//
//                           Arch: x86_64
//                Current version: 53.0.0
//          Compatibility version: 1.0.0
//                 Source version: 297.0.0.0.0
//       Minimum Mac OS X version: 10.12.0
//                    SDK version: 10.12.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (BOOL)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol SKDaemonConnectionProtocol <NSObject>
- (void)deleteRAID:(NSDictionary *)arg1 handlingProgressForOperationUUID:(NSString *)arg2 completionBlock:(void (^)(BOOL, NSError *))arg3;
- (void)repairRAID:(NSDictionary *)arg1 spareDisk:(NSDictionary *)arg2 handlingProgressForOperationUUID:(NSString *)arg3 completionBlock:(void (^)(BOOL, NSError *))arg4;
- (void)volumesForAPFSPS:(NSDictionary *)arg1 completionBlock:(void (^)(NSArray *))arg2;
- (void)physicalStoresForAPFSVolume:(NSDictionary *)arg1 completionBlock:(void (^)(NSArray *))arg2;
- (void)removeDisk:(NSDictionary *)arg1 fromRAID:(NSDictionary *)arg2 handlingProgressForOperationUUID:(NSString *)arg3 completionBlock:(void (^)(BOOL, NSError *))arg4;
- (void)addDisks:(NSArray *)arg1 toRAID:(NSDictionary *)arg2 memberType:(NSString *)arg3 handlingProgressForOperationUUID:(NSString *)arg4 completionBlock:(void (^)(BOOL, NSError *))arg5;
- (void)createRAIDSetType:(NSString *)arg1 name:(NSString *)arg2 disks:(NSArray *)arg3 format:(NSDictionary *)arg4 options:(NSDictionary *)arg5 handlingProgressForOperationUUID:(NSString *)arg6 completionBlock:(void (^)(NSDictionary *, NSError *))arg7;
- (void)fixIncorrectlySizedPartitionMapOnDisk:(NSDictionary *)arg1 completionBlock:(void (^)(BOOL, NSError *))arg2;
- (void)addChildVolumeToEmptyLVG:(NSDictionary *)arg1 handlingProgressForOperationUUID:(NSString *)arg2 completetionBlock:(void (^)(NSDictionary *, NSError *))arg3;
- (void)filesystemsWithCallbackBlock:(void (^)(NSArray *))arg1;
- (void)isBusy:(void (^)(BOOL))arg1;
- (void)childDisksForWholeDisk:(NSDictionary *)arg1 withCallbackBlock:(void (^)(NSArray *))arg2;
- (void)wholeDiskForDiskDictionary:(NSDictionary *)arg1 withCallbackBlock:(void (^)(NSDictionary *))arg2;
- (void)diskForPath:(NSString *)arg1 withCallbackBlock:(void (^)(NSDictionary *))arg2;
- (void)recacheDisk:(NSDictionary *)arg1 withCallbackBlock:(void (^)(void))arg2;
- (void)enclosingDiskAtLevel:(unsigned long long)arg1 withCallbackBlock:(void (^)(NSDictionary *))arg2;
- (void)enclosingVolumeCount:(void (^)(unsigned long long))arg1;
- (void)getFDEUsersFromDisk:(NSDictionary *)arg1 withCompletionBlock:(void (^)(NSArray *, NSError *))arg2;
- (void)decryptVolume:(NSDictionary *)arg1 withPassword:(NSString *)arg2 withCompletionBlock:(void (^)(NSError *))arg3;
- (void)unlockEncryptedDisk:(NSDictionary *)arg1 withiCloudUser:(NSString *)arg2 iCloudHandle:(NSString *)arg3 withCompletionBlock:(void (^)(BOOL))arg4;
- (void)unlockEncryptedDisk:(NSDictionary *)arg1 diskUnlockPassword:(NSString *)arg2 withCompletionBlock:(void (^)(BOOL))arg3;
- (void)validateEncryptedDiskPassword:(NSDictionary *)arg1 diskUnlockPassword:(NSString *)arg2 withCompletionBlock:(void (^)(BOOL))arg3;
- (void)establishReserveKEKForDisk:(NSDictionary *)arg1 diskUnlockPassword:(NSString *)arg2 withCompletionBlock:(void (^)(BOOL))arg3;
- (void)changePasswordForDisk:(NSDictionary *)arg1 oldPassword:(NSString *)arg2 newPassword:(NSString *)arg3 passwordHint:(NSString *)arg4 withCompletionBlock:(void (^)(BOOL))arg5;
- (void)extendedInfoForDisk:(NSDictionary *)arg1 withCompletionBlock:(void (^)(NSDictionary *))arg2;
- (void)blockRestoreDisk:(NSDictionary *)arg1 fromDiskImageFileURL:(NSString *)arg2 handlingProgressForOperationUUID:(NSString *)arg3 withCompletionBlock:(void (^)(BOOL, NSError *))arg4;
- (void)blockRestoreDisk:(NSDictionary *)arg1 fromDisk:(NSDictionary *)arg2 handlingProgressForOperationUUID:(NSString *)arg3 withCompletionBlock:(void (^)(BOOL, NSError *))arg4;
- (void)iCloudRecoverManageFDEUsersForDisk:(NSDictionary *)arg1 icloudUser:(NSString *)arg2 icloudHandle:(NSString *)arg3 usersToRemoveArray:(NSArray *)arg4 resettingUserPasswords:(NSArray *)arg5 fdeRecipe:(NSArray *)arg6 handlingProgressForOperationUUID:(NSString *)arg7 withCompletionBlock:(void (^)(NSError *))arg8;
- (void)manageFDEUsersForDisk:(NSDictionary *)arg1 diskUnlockPassword:(NSString *)arg2 removingUsers:(NSArray *)arg3 resettingUserPasswords:(NSArray *)arg4 fdeRecipe:(NSArray *)arg5 handlingProgressForOperationUUID:(NSString *)arg6 withCompletionBlock:(void (^)(NSError *))arg7;
- (void)convertDiskToFDE:(NSDictionary *)arg1 withRecipe:(NSArray *)arg2 handlingProgressForOperationUUID:(NSString *)arg3 withCompletionBlock:(void (^)(NSError *))arg4;
- (void)convertDisk:(NSDictionary *)arg1 toCoreStorage:(BOOL)arg2 handlingProgressForOperationUUID:(NSString *)arg3 withCompletionBlock:(void (^)(NSDictionary *, NSError *))arg4;
- (void)getRecoverySystemInfoForDisk:(NSDictionary *)arg1 withCompletionBlock:(void (^)(NSDictionary *, NSError *))arg2;
- (void)ejectDisk:(NSDictionary *)arg1 withCompletionBlock:(void (^)(NSError *))arg2;
- (void)enableJournalingOnDisk:(NSDictionary *)arg1 withCompletionBlock:(void (^)(NSDictionary *, BOOL))arg2;
- (void)enablePermissionsOnDisk:(NSDictionary *)arg1 withCompletionBlock:(void (^)(NSDictionary *, BOOL))arg2;
- (void)ensureRecoveryForDisk:(NSDictionary *)arg1 withRecoverySystemPath:(NSString *)arg2 chunkkList:(NSString *)arg3 diagnostics:(NSString *)arg4 ignoreBlacklist:(BOOL)arg5 handlingProgressForOperationUUID:(NSString *)arg6 callbackBlock:(void (^)(NSDictionary *, NSError *))arg7;
- (void)blessDisk:(NSDictionary *)arg1 options:(NSDictionary *)arg2 withCallbackBlock:(void (^)(BOOL, NSError *))arg3;
- (void)compositeDisks:(NSArray *)arg1 volumeName:(NSString *)arg2 handlingProgressForOperationUUID:(NSString *)arg3 callbackBlock:(void (^)(NSError *))arg4;
- (void)removeDisk:(NSDictionary *)arg1 handlingProgressForOperationUUID:(NSString *)arg2 withCompletionHandler:(void (^)(NSError *))arg3;
- (void)resize:(NSDictionary *)arg1 toSize:(unsigned long long)arg2 handlingProgressForOperationUUID:(NSString *)arg3 withCompletionHandler:(void (^)(NSError *))arg4;
- (void)splitDisk:(NSDictionary *)arg1 toSize:(unsigned long long)arg2 newDiskRole:(NSString *)arg3 name:(NSString *)arg4 caseSensitive:(BOOL)arg5 password:(NSString *)arg6 handlingProgressForOperationUUID:(NSString *)arg7 withCompletionBlock:(void (^)(NSDictionary *, NSDictionary *, NSError *))arg8;
- (void)splitDisk:(NSDictionary *)arg1 toSize:(unsigned long long)arg2 newDiskType:(NSString *)arg3 name:(NSString *)arg4 caseSensitive:(BOOL)arg5 password:(NSString *)arg6 handlingProgressForOperationUUID:(NSString *)arg7 withCompletionBlock:(void (^)(NSDictionary *, NSDictionary *, NSError *))arg8;
- (void)mountDisk:(NSDictionary *)arg1 options:(NSArray *)arg2 withCompletionBlock:(void (^)(NSError *))arg3;
- (void)unmountDisk:(NSDictionary *)arg1 withCompletionBlock:(void (^)(NSError *))arg2;
- (void)renameDisk:(NSDictionary *)arg1 to:(NSString *)arg2 withCompletionBlock:(void (^)(NSError *))arg3;
- (void)secureEraseDisk:(NSDictionary *)arg1 withEraseLevel:(int)arg2 handlingProgressForOperationUUID:(NSString *)arg3 withCompletionBlock:(void (^)(NSDictionary *, NSError *))arg4;
- (void)eraseDisk:(NSDictionary *)arg1 toFilesystem:(NSDictionary *)arg2 partitionMap:(NSString *)arg3 name:(NSString *)arg4 password:(NSString *)arg5 handlingProgressForOperationUUID:(NSString *)arg6 withCompletionBlock:(void (^)(NSDictionary *, NSError *))arg7;
- (void)repairUserHomeDirectoryForDisk:(NSDictionary *)arg1 forUser:(long long)arg2 handlingProgressForOperationUUID:(NSString *)arg3 withCompletionBlock:(void (^)(NSError *))arg4;
- (void)repairDisk:(NSDictionary *)arg1 handlingProgressForOperationUUID:(NSString *)arg2 withCompletionBlock:(void (^)(NSError *))arg3;
- (void)verifyDisk:(NSDictionary *)arg1 handlingProgressForOperationUUID:(NSString *)arg2 withCompletionBlock:(void (^)(BOOL, NSError *))arg3;
- (void)setDiskIconWithImageData:(NSData *)arg1 forDisk:(NSDictionary *)arg2 WithReply:(void (^)(BOOL))arg3;
- (void)setDaemonLanguage:(NSString *)arg1 withCompletionBlock:(void (^)(BOOL))arg2;
@end

@protocol SKDaemonProtocol <NSObject>
- (void)deleteRAID:(SKRAIDDisk *)arg1 progress:(void (^)(float, NSString *))arg2 completionBlock:(void (^)(BOOL, NSError *))arg3;
- (void)repairRAID:(SKRAIDDisk *)arg1 spareDisk:(SKDisk *)arg2 progress:(void (^)(float, NSString *))arg3 completionBlock:(void (^)(BOOL, NSError *))arg4;
- (void)volumesForAPFSPS:(SKDisk *)arg1 completionBlock:(void (^)(NSArray *))arg2;
- (void)physicalStoresForAPFSVolume:(SKDisk *)arg1 completionBlock:(void (^)(NSArray *))arg2;
- (void)removeDisk:(SKRAIDDisk *)arg1 fromRAID:(SKRAIDDisk *)arg2 progress:(void (^)(float, NSString *))arg3 completionBlock:(void (^)(BOOL, NSError *))arg4;
- (void)addDisks:(NSArray *)arg1 toRAID:(SKRAIDDisk *)arg2 memberType:(NSString *)arg3 progressBlock:(void (^)(float, NSString *))arg4 completionBlock:(void (^)(BOOL, NSError *))arg5;
- (void)createRAIDSetType:(NSString *)arg1 name:(NSString *)arg2 disks:(NSArray *)arg3 format:(SKFilesystem *)arg4 options:(NSDictionary *)arg5 progressBlock:(void (^)(float, NSString *))arg6 completionBlock:(void (^)(SKRAIDDisk *, NSError *))arg7;
- (void)fixIncorrectlySizedPartitionMapOnDisk:(SKDisk *)arg1 completionBlock:(void (^)(BOOL, NSError *))arg2;
- (void)addChildVolumeToEmptyLVG:(SKDisk *)arg1 withProgress:(void (^)(float, NSString *))arg2 completetionBlock:(void (^)(SKDisk *, NSError *))arg3;
- (void)filesystemsWithCallbackBlock:(void (^)(NSArray *))arg1;
- (void)blockRestoreDisk:(SKDisk *)arg1 fromDiskImageFileURL:(NSURL *)arg2 handlingProgress:(void (^)(float, NSString *))arg3 withCompletionBlock:(void (^)(BOOL, NSError *))arg4;
- (void)blockRestoreDisk:(SKDisk *)arg1 fromDisk:(SKDisk *)arg2 handlingProgress:(void (^)(float, NSString *))arg3 withCompletionBlock:(void (^)(BOOL, NSError *))arg4;
- (void)childDisksForWholeDisk:(SKDisk *)arg1 withCallbackBlock:(void (^)(NSArray *))arg2;
- (void)wholeDiskForDisk:(SKDisk *)arg1 withCallbackBlock:(void (^)(SKDisk *))arg2;
- (void)isBusy:(void (^)(BOOL))arg1;
- (void)diskForPath:(NSString *)arg1 withCallbackBlock:(void (^)(SKDisk *))arg2;
- (void)recacheDisk:(SKDisk *)arg1 withCallbackBlock:(void (^)(void))arg2;
- (void)enclosingDiskAtLevel:(unsigned long long)arg1 withCallbackBlock:(void (^)(SKDisk *))arg2;
- (void)enclosingVolumeCount:(void (^)(unsigned long long))arg1;
- (void)getFDEUsersFromDisk:(SKDisk *)arg1 withCompletionBlock:(void (^)(NSArray *, NSError *))arg2;
- (void)convertDiskToFDE:(SKDisk *)arg1 withRecipe:(NSArray *)arg2 handlingProgress:(void (^)(float, NSString *))arg3 withCompletionBlock:(void (^)(NSError *))arg4;
- (void)changePasswordForDisk:(SKCSDisk *)arg1 oldPassword:(NSString *)arg2 newPassword:(NSString *)arg3 passwordHint:(NSString *)arg4 withCompletionBlock:(void (^)(BOOL))arg5;
- (void)decryptVolume:(SKDisk *)arg1 withPassword:(NSString *)arg2 withCompletionBlock:(void (^)(NSError *))arg3;
- (void)unlockEncryptedDisk:(SKDisk *)arg1 withiCloudUser:(NSString *)arg2 iCloudHandle:(NSString *)arg3 withCompletionBlock:(void (^)(BOOL))arg4;
- (void)unlockEncryptedDisk:(SKDisk *)arg1 diskUnlockPassword:(NSString *)arg2 withCompletionBlock:(void (^)(BOOL))arg3;
- (void)validateEncryptedDiskPassword:(SKDisk *)arg1 diskUnlockPassword:(NSString *)arg2 withCompletionBlock:(void (^)(BOOL))arg3;
- (void)establishReserveKEKForDisk:(SKDisk *)arg1 diskUnlockPassword:(NSString *)arg2 withCompletionBlock:(void (^)(BOOL))arg3;
- (void)extendedInfoForDisk:(SKDisk *)arg1 withCompletionBlock:(void (^)(NSDictionary *))arg2;
- (void)iCloudRecoverManageFDEUsersForDisk:(SKDisk *)arg1 icloudUser:(NSString *)arg2 iCloudHandle:(NSString *)arg3 usersToRemoveArray:(NSArray *)arg4 resettingUserPasswords:(NSArray *)arg5 fdeRecipe:(NSArray *)arg6 handlingProgress:(void (^)(float, NSString *))arg7 withCompletionBlock:(void (^)(NSError *))arg8;
- (void)manageFDEUsersForDisk:(SKDisk *)arg1 diskUnlockPassword:(NSString *)arg2 removingUsers:(NSArray *)arg3 resettingUserPasswords:(NSArray *)arg4 fdeRecipe:(NSArray *)arg5 handlingProgress:(void (^)(float, NSString *))arg6 withCompletionBlock:(void (^)(NSError *))arg7;
- (void)convertDisk:(SKDisk *)arg1 toCoreStorage:(BOOL)arg2 handlingProgress:(void (^)(float, NSString *))arg3 withCompletionBlock:(void (^)(SKDisk *, NSError *))arg4;
- (void)getRecoverySystemInfoForDisk:(SKDisk *)arg1 withCompletionBlock:(void (^)(NSDictionary *, NSError *))arg2;
- (void)ejectDisk:(SKDisk *)arg1 withCompletionBlock:(void (^)(NSError *))arg2;
- (void)enableJournalingOnDisk:(SKDisk *)arg1 withCompletionBlock:(void (^)(SKDisk *, BOOL))arg2;
- (void)enablePermissionsOnDisk:(SKDisk *)arg1 withCompletionBlock:(void (^)(SKDisk *, BOOL))arg2;
- (void)ensureRecoveryForDisk:(SKDisk *)arg1 withRecoverySystemPath:(NSString *)arg2 chunkkList:(NSString *)arg3 diagnostics:(NSString *)arg4 ignoreBlacklist:(BOOL)arg5 handlingProgress:(void (^)(float, NSString *))arg6 callbackBlock:(void (^)(SKDisk *, NSError *))arg7;
- (void)blessDisk:(SKDisk *)arg1 options:(NSDictionary *)arg2 withCallbackBlock:(void (^)(BOOL, NSError *))arg3;
- (void)compositeDisks:(NSArray *)arg1 volumeName:(NSString *)arg2 handlingProgress:(void (^)(float, NSString *))arg3 callbackBlock:(void (^)(NSError *))arg4;
- (void)removeDisk:(SKDisk *)arg1 handlingProgress:(void (^)(float, NSString *))arg2 withCompletionHandler:(void (^)(NSError *))arg3;
- (void)resize:(SKDisk *)arg1 toSize:(unsigned long long)arg2 handlingProgress:(void (^)(float, NSString *))arg3 withCompletionHandler:(void (^)(NSError *))arg4;
- (void)splitDisk:(SKDisk *)arg1 toSize:(unsigned long long)arg2 newDiskRole:(NSString *)arg3 name:(NSString *)arg4 caseSensitive:(BOOL)arg5 password:(NSString *)arg6 handlingProgress:(void (^)(float, NSString *))arg7 withCompletionBlock:(void (^)(SKDisk *, SKDisk *, NSError *))arg8;
- (void)splitDisk:(SKDisk *)arg1 toSize:(unsigned long long)arg2 newDiskType:(NSString *)arg3 name:(NSString *)arg4 caseSensitive:(BOOL)arg5 password:(NSString *)arg6 handlingProgress:(void (^)(float, NSString *))arg7 withCompletionBlock:(void (^)(SKDisk *, SKDisk *, NSError *))arg8;
- (void)mountDisk:(SKDisk *)arg1 options:(NSArray *)arg2 withCompletionBlock:(void (^)(NSError *))arg3;
- (void)unmountDisk:(SKDisk *)arg1 withCompletionBlock:(void (^)(NSError *))arg2;
- (void)renameDisk:(SKDisk *)arg1 to:(NSString *)arg2 withCompletionBlock:(void (^)(NSError *))arg3;
- (void)secureEraseDisk:(SKDisk *)arg1 withEraseLevel:(int)arg2 handlingProgress:(void (^)(float, NSString *))arg3 withCompletionBlock:(void (^)(SKDisk *, NSError *))arg4;
- (void)eraseDisk:(SKDisk *)arg1 toFilesystem:(SKFilesystem *)arg2 partitionMap:(NSString *)arg3 name:(NSString *)arg4 password:(NSString *)arg5 handlingProgress:(void (^)(float, NSString *))arg6 withCompletionBlock:(void (^)(SKDisk *, NSError *))arg7;
- (void)repairUserHomeDirectoryForDisk:(SKDisk *)arg1 forUser:(long long)arg2 handlingProgress:(void (^)(float, NSString *))arg3 withCompletionBlock:(void (^)(NSError *))arg4;
- (void)repairDisk:(SKDisk *)arg1 handlingProgress:(void (^)(float, NSString *))arg2 withCompletionBlock:(void (^)(NSError *))arg3;
- (void)verifyDisk:(SKDisk *)arg1 handlingProgress:(void (^)(float, NSString *))arg2 withCompletionBlock:(void (^)(BOOL, NSError *))arg3;
- (void)setDiskIconWithImageData:(NSData *)arg1 forDisk:(SKDisk *)arg2 WithReply:(void (^)(BOOL))arg3;
- (void)setDaemonLanguage:(NSString *)arg1 withCompletionBlock:(void (^)(BOOL))arg2;
@end

@protocol SKHelperClientProtocol <SKProgressHandler, SKManagerListener>
@end

@protocol SKManagerListener <NSObject>

@optional
- (NSSet *)visibleDiskRoles;
- (void)disksDisappeared:(NSArray *)arg1;
- (void)disksChanged:(NSArray *)arg1;
- (void)disksAppeared:(NSArray *)arg1;
- (void)initialPopulateComplete;
- (void)managerResumed;
- (void)managerStalled;
@end

@protocol SKProgressHandler <NSObject>
- (void)updateUUID:(NSString *)arg1 progress:(float)arg2 message:(NSString *)arg3;
@end

@interface SKBaseManager : NSObject
{
}

+ (id)defaultVisibleRoles;
+ (id)sharedManager;
- (id)allDisks;

@end

@interface SKManager : SKBaseManager <SKManagerListener>
{
    BOOL diskQueueStuck;
    BOOL _shouldBeBindingsSafe;
    NSMutableSet *allDisks;
    NSMutableDictionary *_diskOperationMap;
    NSSet *visibleRoles;
    NSArray *imageSrcArray;
    BOOL _didInitiallyPopulate;
    NSXPCConnection *_connection;
    NSObject<OS_dispatch_queue> *_diskNotificationQueue;
    NSHashTable *_listeners;
    NSMutableDictionary *_listenersAppearedDisks;
    NSObject<OS_dispatch_queue> *_waitingForDiskQueue;
    NSMutableSet *_waitingForDiskSet;
    NSArray *_filesystems;
}

+ (id)defaultVisibleRoles;
+ (id)sharedManager;
+ (id)sharedManagerWithBindingsSafety:(BOOL)arg1;
- (void).cxx_destruct;
- (void)managerResumed;
- (void)managerStalled;
- (void)disksChanged:(id)arg1;
- (void)disksDisappeared:(id)arg1;
- (void)_disksAppeared:(id)arg1 toListener:(id)arg2;
- (void)disksAppeared:(id)arg1;
- (void)_initialPopulateCompleteForListener:(id)arg1;
- (void)initialPopulateComplete;
- (void)removeListener:(id)arg1;
- (void)addListener:(id)arg1;
- (void)_recacheDisk:(id)arg1;
- (void)_recacheDisk:(id)arg1 notifyWhenDone:(CDUnknownBlockType)arg2;
- (BOOL)factoryReset:(CDUnknownBlockType)arg1;
- (void)createRAIDSetType:(id)arg1 name:(id)arg2 disks:(id)arg3 format:(id)arg4 options:(id)arg5 progressBlock:(CDUnknownBlockType)arg6 completionBlock:(CDUnknownBlockType)arg7;
- (id)newDiskWithDictionary:(id)arg1;
- (id)knownDiskForDictionary:(id)arg1 waitingForDaemon:(BOOL)arg2 fromSet:(id)arg3;
- (id)knownDiskForDictionary:(id)arg1 waitingForDaemon:(BOOL)arg2;
- (id)knownDiskForDictionary:(id)arg1;
- (void)knownDiskForDictionary:(id)arg1 notify:(CDUnknownBlockType)arg2 onQueue:(id)arg3;
- (id)knownDisksForDictionaries:(id)arg1 waitingForDaemon:(BOOL)arg2 fromSet:(id)arg3;
- (id)knownDisksForDictionaries:(id)arg1 waitingForDaemon:(BOOL)arg2;
- (id)knownDisksForDictionaries:(id)arg1;
- (id)volumesForAPFSPS:(id)arg1;
- (id)physicalStoresForAPFSVolume:(id)arg1;
- (id)membersForRAIDSet:(id)arg1;
- (id)setForRAIDMember:(id)arg1;
- (id)filesystemWithSKType:(id)arg1 isCaseSensitive:(BOOL)arg2 isEncrypted:(BOOL)arg3;
- (id)formatableFileSystems;
- (id)filesystems;
- (id)enclosingDiskAtLevel:(unsigned long long)arg1;
- (unsigned long long)enclosingVolumeCount;
- (BOOL)compositeDisks:(id)arg1 volumeName:(id)arg2 progressBlock:(CDUnknownBlockType)arg3 callbackBlock:(CDUnknownBlockType)arg4;
- (id)childDisksForWholeDisk:(id)arg1;
- (id)wholeDiskForDisk:(id)arg1;
- (id)logicalVoumeGroupForCSPV:(id)arg1;
- (id)physicalVolumesForCSLVG:(id)arg1;
- (id)logicalVoumeGroupForCSLV:(id)arg1;
- (id)diskForPath:(id)arg1;
- (id)visibleDisks;
- (id)visibleRoles;
- (void)setVisibleRoles:(id)arg1;
- (BOOL)isBusy;
- (id)allDisks;
- (id)initWithBindingSafety:(BOOL)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SKFilesystem : NSObject
{
    BOOL _isEncrypted;
    BOOL _isCaseSensitive;
    BOOL _isJournaled;
    BOOL _shouldShow;
    int _sortPriority;
    NSString *_localizedName;
    NSString *_type;
    NSString *_dmPersonality;
    unsigned long long _minimumSize;
    NSString *_localizedKey;
}

+ (BOOL)_shouldShowFilesystem:(id)arg1;
+ (id)_skfilesystemTypeWithPersonality:(id)arg1;
+ (id)filesystemsWithDMFilesystem:(id)arg1;
@property int sortPriority; // @synthesize sortPriority=_sortPriority;
@property(retain) NSString *localizedKey; // @synthesize localizedKey=_localizedKey;
@property unsigned long long minimumSize; // @synthesize minimumSize=_minimumSize;
@property BOOL shouldShow; // @synthesize shouldShow=_shouldShow;
@property BOOL isJournaled; // @synthesize isJournaled=_isJournaled;
@property BOOL isCaseSensitive; // @synthesize isCaseSensitive=_isCaseSensitive;
@property BOOL isEncrypted; // @synthesize isEncrypted=_isEncrypted;
@property(retain) NSString *dmPersonality; // @synthesize dmPersonality=_dmPersonality;
@property(retain) NSString *type; // @synthesize type=_type;
@property(retain) NSString *localizedName; // @synthesize localizedName=_localizedName;
- (void).cxx_destruct;
- (BOOL)isEqual:(id)arg1;
- (id)description;
- (id)dicationaryRepresentation;
- (id)initWithDictionaryRepresentation:(id)arg1;
- (id)initWithSKFilesystem:(id)arg1 localizedName:(id)arg2 localizedKey:(id)arg3 caseSensitive:(BOOL)arg4 encrypted:(BOOL)arg5 shouldShow:(BOOL)arg6 dmPersonality:(id)arg7 minimumSize:(unsigned long long)arg8 sortPriority:(int)arg9;

@end

@interface SKDisk : NSObject
{
    NSArray *_sortedChildren;
    NSObject *_daDiskRef;
    BOOL _isValid;
    BOOL _canBeDeleted;
    BOOL _isDiskImage;
    BOOL _isSystemRAMDisk;
    BOOL _isInternal;
    BOOL _isSolidState;
    BOOL _isWholeDisk;
    BOOL _isPhysicalDisk;
    BOOL _isWritable;
    BOOL _supportsJournaling;
    BOOL _isJournaled;
    BOOL _isEjectable;
    BOOL _isNetwork;
    BOOL _isLocked;
    BOOL _isOpticalDisc;
    BOOL _canSupportRecoveryPartition;
    BOOL _supportsRepair;
    BOOL _supportsVerify;
    BOOL _ownersEnabled;
    BOOL _isCaseSensitive;
    BOOL _partitionMapIsIncorrectlySized;
    int _smartStatus;
    NSString *_type;
    NSString *_filesystemType;
    NSImage *_diskIcon;
    NSString *_volumeName;
    NSString *_volumeUUID;
    NSString *_mountPoint;
    unsigned long long _freeSpace;
    unsigned long long _purgeableSpace;
    unsigned long long _availableSpace;
    unsigned long long _totalSpace;
    unsigned long long _minimumDiskSize;
    unsigned long long _maximumDiskSize;
    NSString *_diskIdentifier;
    NSString *_protocol;
    NSString *_mediaName;
    unsigned long long _unformattedSize;
    unsigned long long _childCount;
    unsigned long long _startLocation;
    SKFilesystem *_filesystem;
    NSString *_role;
}

@property(retain) NSString *role; // @synthesize role=_role;
@property BOOL partitionMapIsIncorrectlySized; // @synthesize partitionMapIsIncorrectlySized=_partitionMapIsIncorrectlySized;
@property(retain) SKFilesystem *filesystem; // @synthesize filesystem=_filesystem;
@property int smartStatus; // @synthesize smartStatus=_smartStatus;
@property unsigned long long startLocation; // @synthesize startLocation=_startLocation;
@property unsigned long long childCount; // @synthesize childCount=_childCount;
@property BOOL isCaseSensitive; // @synthesize isCaseSensitive=_isCaseSensitive;
@property unsigned long long unformattedSize; // @synthesize unformattedSize=_unformattedSize;
@property(retain) NSString *mediaName; // @synthesize mediaName=_mediaName;
@property BOOL ownersEnabled; // @synthesize ownersEnabled=_ownersEnabled;
@property BOOL supportsVerify; // @synthesize supportsVerify=_supportsVerify;
@property BOOL supportsRepair; // @synthesize supportsRepair=_supportsRepair;
@property BOOL canSupportRecoveryPartition; // @synthesize canSupportRecoveryPartition=_canSupportRecoveryPartition;
@property BOOL isOpticalDisc; // @synthesize isOpticalDisc=_isOpticalDisc;
@property BOOL isLocked; // @synthesize isLocked=_isLocked;
@property BOOL isNetwork; // @synthesize isNetwork=_isNetwork;
@property BOOL isEjectable; // @synthesize isEjectable=_isEjectable;
@property BOOL isJournaled; // @synthesize isJournaled=_isJournaled;
@property BOOL supportsJournaling; // @synthesize supportsJournaling=_supportsJournaling;
@property BOOL isWritable; // @synthesize isWritable=_isWritable;
@property BOOL isPhysicalDisk; // @synthesize isPhysicalDisk=_isPhysicalDisk;
@property BOOL isWholeDisk; // @synthesize isWholeDisk=_isWholeDisk;
@property BOOL isSolidState; // @synthesize isSolidState=_isSolidState;
@property BOOL isInternal; // @synthesize isInternal=_isInternal;
@property BOOL isSystemRAMDisk; // @synthesize isSystemRAMDisk=_isSystemRAMDisk;
@property BOOL isDiskImage; // @synthesize isDiskImage=_isDiskImage;
@property(retain) NSString *protocol; // @synthesize protocol=_protocol;
@property(retain) NSString *diskIdentifier; // @synthesize diskIdentifier=_diskIdentifier;
@property BOOL canBeDeleted; // @synthesize canBeDeleted=_canBeDeleted;
@property unsigned long long maximumDiskSize; // @synthesize maximumDiskSize=_maximumDiskSize;
@property unsigned long long minimumDiskSize; // @synthesize minimumDiskSize=_minimumDiskSize;
@property unsigned long long totalSpace; // @synthesize totalSpace=_totalSpace;
@property unsigned long long availableSpace; // @synthesize availableSpace=_availableSpace;
@property unsigned long long purgeableSpace; // @synthesize purgeableSpace=_purgeableSpace;
@property unsigned long long freeSpace; // @synthesize freeSpace=_freeSpace;
@property(retain) NSString *mountPoint; // @synthesize mountPoint=_mountPoint;
@property(retain) NSString *volumeUUID; // @synthesize volumeUUID=_volumeUUID;
@property(retain) NSString *volumeName; // @synthesize volumeName=_volumeName;
@property(retain) NSImage *diskIcon; // @synthesize diskIcon=_diskIcon;
@property BOOL isValid; // @synthesize isValid=_isValid;
@property(retain) NSString *filesystemType; // @synthesize filesystemType=_filesystemType;
@property(retain) NSString *type; // @synthesize type=_type;
- (void).cxx_destruct;
- (id)description;
- (BOOL)fixIncorrectlySizedPartitionMapWithCompletionHandler:(CDUnknownBlockType)arg1;
- (BOOL)extendedInfoForDiskWithCallback:(CDUnknownBlockType)arg1;
- (BOOL)blockRestoreFromDiskImageFileURL:(id)arg1 handlingProgress:(CDUnknownBlockType)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (BOOL)blockRestoreFromDisk:(id)arg1 handlingProgress:(CDUnknownBlockType)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (void)getRecoverySystemInfo:(CDUnknownBlockType)arg1;
- (BOOL)ensureRecovery:(id)arg1 chunkkList:(id)arg2 diagnostics:(id)arg3 handlingProgress:(CDUnknownBlockType)arg4 withCompletionBlock:(CDUnknownBlockType)arg5;
- (BOOL)ensureRecovery:(id)arg1 chunkkList:(id)arg2 handlingProgress:(CDUnknownBlockType)arg3 withCompletionBlock:(CDUnknownBlockType)arg4;
- (BOOL)convertDiskToFDEWithUsers:(id)arg1 recoveryKey:(id)arg2 handlingProgress:(CDUnknownBlockType)arg3 withCompletionBlock:(CDUnknownBlockType)arg4;
- (BOOL)resizeToSize:(unsigned long long)arg1 handlingProgress:(CDUnknownBlockType)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (BOOL)convertToCoreStorage:(BOOL)arg1 handlingProgress:(CDUnknownBlockType)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (BOOL)removeDiskHandlingProgress:(CDUnknownBlockType)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (BOOL)splitToSize:(unsigned long long)arg1 newDiskRole:(id)arg2 name:(id)arg3 caseSensitive:(BOOL)arg4 password:(id)arg5 handlingProgress:(CDUnknownBlockType)arg6 withCompletionBlock:(CDUnknownBlockType)arg7;
- (BOOL)splitToSize:(unsigned long long)arg1 newDiskType:(id)arg2 name:(id)arg3 caseSensitive:(BOOL)arg4 password:(id)arg5 handlingProgress:(CDUnknownBlockType)arg6 withCompletionBlock:(CDUnknownBlockType)arg7;
- (BOOL)repairUserHomeForUser:(long long)arg1 withProgressHandler:(CDUnknownBlockType)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (BOOL)repairWithProgressHandler:(CDUnknownBlockType)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (BOOL)verifyWithProgressHandler:(CDUnknownBlockType)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (BOOL)secureEraseWithLevel:(int)arg1 handlingProgress:(CDUnknownBlockType)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (BOOL)eraseToFileSystemType:(id)arg1 partitionMap:(id)arg2 name:(id)arg3 caseSensitive:(BOOL)arg4 password:(id)arg5 handlingProgress:(CDUnknownBlockType)arg6 withCompletionBlock:(CDUnknownBlockType)arg7;
- (BOOL)eraseToFileSystemType:(id)arg1 name:(id)arg2 caseSensitive:(BOOL)arg3 password:(id)arg4 handlingProgress:(CDUnknownBlockType)arg5 withCompletionBlock:(CDUnknownBlockType)arg6;
- (BOOL)eraseToFilesystem:(id)arg1 name:(id)arg2 partitionMap:(id)arg3 password:(id)arg4 handlingProgress:(CDUnknownBlockType)arg5 withCompletionBlock:(CDUnknownBlockType)arg6;
- (BOOL)eraseToFilesystem:(id)arg1 name:(id)arg2 password:(id)arg3 handlingProgress:(CDUnknownBlockType)arg4 withCompletionBlock:(CDUnknownBlockType)arg5;
- (BOOL)eraseHandlingProgress:(CDUnknownBlockType)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (BOOL)canBeErasedToRole:(id)arg1;
- (BOOL)ejectWithCompletionBlock:(CDUnknownBlockType)arg1;
- (BOOL)mountWithOptions:(id)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (BOOL)mountWithCompletionBlock:(CDUnknownBlockType)arg1;
- (BOOL)unmountWithCompletionBlock:(CDUnknownBlockType)arg1;
- (BOOL)enableJournalingWithCompletionBlock:(CDUnknownBlockType)arg1;
- (BOOL)enablePermissionsWithCompletionBlock:(CDUnknownBlockType)arg1;
- (BOOL)setDiskIcon:(id)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (BOOL)rename:(id)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (BOOL)blessWithCompletionBlock:(CDUnknownBlockType)arg1;
- (BOOL)setBootWithCompletionBlock:(CDUnknownBlockType)arg1;
- (BOOL)setBootOnceWithCompletionBlock:(CDUnknownBlockType)arg1;
- (BOOL)canBoot;
- (void)expireCache;
- (void)expireCacheWithCompletionBlock:(CDUnknownBlockType)arg1;
- (BOOL)canResize;
- (id)supportedFilesystems;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)dealloc;
- (id)children;
- (void)updateWithDictionary:(id)arg1;
- (id)initWithDictionary:(id)arg1;
- (BOOL)matchesDictionary:(id)arg1;
- (id)dictionaryRepresentationIncludingIcon;
- (id)dictionaryRepresentation;
- (id)minimalDictionaryRepresentation;

@end

@interface SKCSDisk : SKDisk
{
    BOOL _isEncrypted;
    BOOL _isConverting;
    NSString *_csDiskUUID;
    NSString *_csLVGUUID;
    NSString *_csFamilyUUID;
}

@property(retain) NSString *csFamilyUUID; // @synthesize csFamilyUUID=_csFamilyUUID;
@property BOOL isConverting; // @synthesize isConverting=_isConverting;
@property BOOL isEncrypted; // @synthesize isEncrypted=_isEncrypted;
@property(retain) NSString *csLVGUUID; // @synthesize csLVGUUID=_csLVGUUID;
@property(retain) NSString *csDiskUUID; // @synthesize csDiskUUID=_csDiskUUID;
- (void).cxx_destruct;
- (id)copyRootEncyrptionContext;
- (BOOL)changeDiskOldPassword:(id)arg1 toNewPassword:(id)arg2 withHint:(id)arg3;
- (BOOL)establishReserveKEK:(id)arg1;
- (id)decryptWithPassword:(id)arg1;
- (BOOL)_unlockWithiCloudRecovery:(struct _PCSIdentityData *)arg1 withPCSIdentitySet:(struct _PCSIdentitySetData *)arg2;
- (BOOL)unlockWithiCloudRecoveryPCSSet:(struct _PCSIdentitySetData *)arg1;
- (BOOL)unlockWithiCloudRecovery:(struct _PCSIdentityData *)arg1;
- (BOOL)unlockWithPassword:(id)arg1;
- (BOOL)validateEncryptionPassword:(id)arg1;
- (BOOL)_iCloudRecoveryManageFDEUsers:(struct _PCSIdentityData *)arg1 withPCSIdentitySet:(struct _PCSIdentitySetData *)arg2 addingUsers:(id)arg3 removingUsers:(id)arg4 resettingUserPasswords:(id)arg5 handlingProgress:(CDUnknownBlockType)arg6 withCompletionBlock:(CDUnknownBlockType)arg7;
- (BOOL)iCloudRecoveryManageFDEUsersWithPCSIdentitySet:(struct _PCSIdentitySetData *)arg1 addingUsers:(id)arg2 removingUsers:(id)arg3 resettingUserPasswords:(id)arg4 handlingProgress:(CDUnknownBlockType)arg5 withCompletionBlock:(CDUnknownBlockType)arg6;
- (BOOL)iCloudRecoveryManageFDEUsers:(struct _PCSIdentityData *)arg1 addingUsers:(id)arg2 removingUsers:(id)arg3 resettingUserPasswords:(id)arg4 handlingProgress:(CDUnknownBlockType)arg5 withCompletionBlock:(CDUnknownBlockType)arg6;
- (BOOL)_iCloudRecoveryManageFDEUsers:(struct _PCSIdentityData *)arg1 withPCSIdentitySet:(struct _PCSIdentitySetData *)arg2 addingUsers:(id)arg3 removingUsers:(id)arg4 handlingProgress:(CDUnknownBlockType)arg5 withCompletionBlock:(CDUnknownBlockType)arg6;
- (BOOL)iCloudRecoveryManageFDEUsersWithPCSIdentitySet:(struct _PCSIdentitySetData *)arg1 addingUsers:(id)arg2 removingUsers:(id)arg3 handlingProgress:(CDUnknownBlockType)arg4 withCompletionBlock:(CDUnknownBlockType)arg5;
- (BOOL)iCloudRecoveryManageFDEUsers:(struct _PCSIdentityData *)arg1 addingUsers:(id)arg2 removingUsers:(id)arg3 handlingProgress:(CDUnknownBlockType)arg4 withCompletionBlock:(CDUnknownBlockType)arg5;
- (BOOL)manageFDEUsersWithPassword:(id)arg1 addingUsers:(id)arg2 removingUsers:(id)arg3 resettingUserPasswords:(id)arg4 handlingProgress:(CDUnknownBlockType)arg5 withCompletionBlock:(CDUnknownBlockType)arg6;
- (BOOL)manageFDEUsersWithPassword:(id)arg1 addingUsers:(id)arg2 removingUsers:(id)arg3 handlingProgress:(CDUnknownBlockType)arg4 withCompletionBlock:(CDUnknownBlockType)arg5;
- (id)getFDEUserDictionaries;
- (id)getFDEUsers;
- (id)description;
- (void)_invalidate;
- (BOOL)canResize;
- (id)supportedFilesystems;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)updateWithDictionary:(id)arg1;
- (BOOL)matchesDictionary:(id)arg1;
- (id)minimalDictionaryRepresentation;

@end

@interface SKCSLVGDisk : SKDisk
{
    NSString *_csLVGUUID;
    NSArray *_csPVChildrenUUIDs;
}

@property(retain) NSArray *csPVChildrenUUIDs; // @synthesize csPVChildrenUUIDs=_csPVChildrenUUIDs;
@property(retain) NSString *csLVGUUID; // @synthesize csLVGUUID=_csLVGUUID;
- (void).cxx_destruct;
- (void)addChildVolumeToEmptyLVGWithProgress:(CDUnknownBlockType)arg1 completetionBlock:(CDUnknownBlockType)arg2;
- (id)physicalVolumes;
- (id)children;
- (id)description;
- (BOOL)canResize;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)updateWithDictionary:(id)arg1;
- (BOOL)matchesDictionary:(id)arg1;
- (id)minimalDictionaryRepresentation;

@end

@interface SKWaitingForDiskElement : NSObject
{
    NSDictionary *_diskDictionary;
    CDUnknownBlockType _block;
}

@property(copy) CDUnknownBlockType block; // @synthesize block=_block;
@property(retain) NSDictionary *diskDictionary; // @synthesize diskDictionary=_diskDictionary;
- (void).cxx_destruct;

@end

@interface SKOSXSystemDisk : SKCSLVGDisk
{
}

- (id)otherDisks;
- (id)userDisk;
- (id)applicationDisk;

@end

@interface SKCSPVDisk : SKDisk
{
    NSString *_csLVGUUID;
    NSString *_csDiskUUID;
}

@property(retain) NSString *csDiskUUID; // @synthesize csDiskUUID=_csDiskUUID;
@property(retain) NSString *csLVGUUID; // @synthesize csLVGUUID=_csLVGUUID;
- (void).cxx_destruct;
- (id)logicalVolumeGroup;
- (id)description;
- (BOOL)canResize;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)updateWithDictionary:(id)arg1;
- (BOOL)matchesDictionary:(id)arg1;
- (id)minimalDictionaryRepresentation;

@end

@interface SKBindableDisk : NSObject
{
    BOOL _isValid;
    BOOL _canBeDeleted;
    BOOL _isDiskImage;
    BOOL _isInternal;
    BOOL _isSolidState;
    BOOL _isWholeDisk;
    BOOL _isWritable;
    BOOL _supportsJournaling;
    BOOL _isEjectable;
    BOOL _isNetwork;
    BOOL _isLocked;
    BOOL _canSupportRecoveryPartition;
    BOOL _isObserving;
    SKDisk *_representedDisk;
    NSString *_role;
    NSString *_type;
    NSImage *_diskIcon;
    NSString *_volumeName;
    NSString *_volumeUUID;
    NSString *_mountPoint;
    unsigned long long _freeSpace;
    unsigned long long _purgeableSpace;
    unsigned long long _availableSpace;
    unsigned long long _totalSpace;
    unsigned long long _minimumDiskSize;
    unsigned long long _maximumDiskSize;
    NSString *_diskIdentifier;
    NSString *_protocol;
}

+ (id)keysToObserve;
@property BOOL isObserving; // @synthesize isObserving=_isObserving;
@property BOOL canSupportRecoveryPartition; // @synthesize canSupportRecoveryPartition=_canSupportRecoveryPartition;
@property BOOL isLocked; // @synthesize isLocked=_isLocked;
@property BOOL isNetwork; // @synthesize isNetwork=_isNetwork;
@property BOOL isEjectable; // @synthesize isEjectable=_isEjectable;
@property BOOL supportsJournaling; // @synthesize supportsJournaling=_supportsJournaling;
@property BOOL isWritable; // @synthesize isWritable=_isWritable;
@property BOOL isWholeDisk; // @synthesize isWholeDisk=_isWholeDisk;
@property BOOL isSolidState; // @synthesize isSolidState=_isSolidState;
@property BOOL isInternal; // @synthesize isInternal=_isInternal;
@property BOOL isDiskImage; // @synthesize isDiskImage=_isDiskImage;
@property(retain) NSString *protocol; // @synthesize protocol=_protocol;
@property(retain) NSString *diskIdentifier; // @synthesize diskIdentifier=_diskIdentifier;
@property BOOL canBeDeleted; // @synthesize canBeDeleted=_canBeDeleted;
@property unsigned long long maximumDiskSize; // @synthesize maximumDiskSize=_maximumDiskSize;
@property unsigned long long minimumDiskSize; // @synthesize minimumDiskSize=_minimumDiskSize;
@property unsigned long long totalSpace; // @synthesize totalSpace=_totalSpace;
@property unsigned long long availableSpace; // @synthesize availableSpace=_availableSpace;
@property unsigned long long purgeableSpace; // @synthesize purgeableSpace=_purgeableSpace;
@property unsigned long long freeSpace; // @synthesize freeSpace=_freeSpace;
@property(retain) NSString *mountPoint; // @synthesize mountPoint=_mountPoint;
@property(retain) NSString *volumeUUID; // @synthesize volumeUUID=_volumeUUID;
@property(retain) NSString *volumeName; // @synthesize volumeName=_volumeName;
@property(retain) NSImage *diskIcon; // @synthesize diskIcon=_diskIcon;
@property BOOL isValid; // @synthesize isValid=_isValid;
@property(retain) NSString *type; // @synthesize type=_type;
@property(retain) NSString *role; // @synthesize role=_role;
@property(retain) SKDisk *representedDisk; // @synthesize representedDisk=_representedDisk;
- (void).cxx_destruct;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)stopObserving;
- (void)dealloc;
- (id)initWithRepresentedDisk:(id)arg1;

@end

@interface SKRAIDDisk : SKDisk
{
    BOOL _isRAIDSet;
    NSString *_raidUUID;
    NSArray *_setMemberUUIDs;
    NSArray *_setSpareUUIDs;
    NSString *_status;
}

@property(retain) NSString *status; // @synthesize status=_status;
@property(retain) NSArray *setSpareUUIDs; // @synthesize setSpareUUIDs=_setSpareUUIDs;
@property(retain) NSArray *setMemberUUIDs; // @synthesize setMemberUUIDs=_setMemberUUIDs;
@property BOOL isRAIDSet; // @synthesize isRAIDSet=_isRAIDSet;
@property(retain) NSString *raidUUID; // @synthesize raidUUID=_raidUUID;
- (void).cxx_destruct;
- (void)deleteRAIDWithProgress:(CDUnknownBlockType)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)removeDiskFromRAID:(id)arg1 progress:(CDUnknownBlockType)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)repairRAIDWithDisk:(id)arg1 progress:(CDUnknownBlockType)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)addDisksToRAID:(id)arg1 withType:(id)arg2 progress:(CDUnknownBlockType)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (BOOL)canResize;
- (id)description;
- (id)supportedFilesystems;
- (id)dictionaryRepresentation;
- (id)minimalDictionaryRepresentation;
- (void)updateWithDictionary:(id)arg1;

@end

@interface SKError : NSObject
{
}

+ (id)errorWithCode:(long long)arg1 disks:(id)arg2 userInfo:(id)arg3;
+ (id)errorWithCode:(long long)arg1 userInfo:(id)arg2;
+ (id)localizedDescriptionForCode:(long long)arg1;

@end

@interface SKHelperClient : NSObject <SKHelperClientProtocol, SKDaemonProtocol>
{
    NSXPCConnection *_connection;
    NSMutableDictionary *_progressBlockDictionary;
    CDUnknownBlockType _progressBlock;
    NSObject<OS_dispatch_queue> *_callbackQueue;
}

+ (id)sharedClient;
- (void).cxx_destruct;
- (void)_setProgressHandler:(CDUnknownBlockType)arg1 forUUID:(id)arg2;
- (id)connectionWithErrorHandler:(CDUnknownBlockType)arg1;
- (void)managerResumed;
- (void)managerStalled;
- (void)disksDisappeared:(id)arg1;
- (void)disksChanged:(id)arg1;
- (void)disksAppeared:(id)arg1;
- (void)initialPopulateComplete;
- (void)updateUUID:(id)arg1 progress:(float)arg2 message:(id)arg3;
- (void)deleteRAID:(id)arg1 progress:(CDUnknownBlockType)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)removeDisk:(id)arg1 fromRAID:(id)arg2 progress:(CDUnknownBlockType)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)repairRAID:(id)arg1 spareDisk:(id)arg2 progress:(CDUnknownBlockType)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)volumesForAPFSPS:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)physicalStoresForAPFSVolume:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)fixIncorrectlySizedPartitionMapOnDisk:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)addDisks:(id)arg1 toRAID:(id)arg2 memberType:(id)arg3 progressBlock:(CDUnknownBlockType)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (void)addChildVolumeToEmptyLVG:(id)arg1 withProgress:(CDUnknownBlockType)arg2 completetionBlock:(CDUnknownBlockType)arg3;
- (void)filesystemsWithCallbackBlock:(CDUnknownBlockType)arg1;
- (void)extendedInfoForDisk:(id)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)blockRestoreDisk:(id)arg1 fromDiskImageFileURL:(id)arg2 handlingProgress:(CDUnknownBlockType)arg3 withCompletionBlock:(CDUnknownBlockType)arg4;
- (void)blockRestoreDisk:(id)arg1 fromDisk:(id)arg2 handlingProgress:(CDUnknownBlockType)arg3 withCompletionBlock:(CDUnknownBlockType)arg4;
- (void)isBusy:(CDUnknownBlockType)arg1;
- (void)childDisksForWholeDisk:(id)arg1 withCallbackBlock:(CDUnknownBlockType)arg2;
- (void)wholeDiskForDisk:(id)arg1 withCallbackBlock:(CDUnknownBlockType)arg2;
- (void)diskForPath:(id)arg1 withCallbackBlock:(CDUnknownBlockType)arg2;
- (void)createRAIDSetType:(id)arg1 name:(id)arg2 disks:(id)arg3 format:(id)arg4 options:(id)arg5 progressBlock:(CDUnknownBlockType)arg6 completionBlock:(CDUnknownBlockType)arg7;
- (void)recacheDisk:(id)arg1 withCallbackBlock:(CDUnknownBlockType)arg2;
- (void)enclosingDiskAtLevel:(unsigned long long)arg1 withCallbackBlock:(CDUnknownBlockType)arg2;
- (void)enclosingVolumeCount:(CDUnknownBlockType)arg1;
- (void)getFDEUsersFromDisk:(id)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)changePasswordForDisk:(id)arg1 oldPassword:(id)arg2 newPassword:(id)arg3 passwordHint:(id)arg4 withCompletionBlock:(CDUnknownBlockType)arg5;
- (void)convertDiskToFDE:(id)arg1 withRecipe:(id)arg2 handlingProgress:(CDUnknownBlockType)arg3 withCompletionBlock:(CDUnknownBlockType)arg4;
- (void)establishReserveKEKForDisk:(id)arg1 diskUnlockPassword:(id)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (void)decryptVolume:(id)arg1 withPassword:(id)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (void)unlockEncryptedDisk:(id)arg1 withiCloudUser:(id)arg2 iCloudHandle:(id)arg3 withCompletionBlock:(CDUnknownBlockType)arg4;
- (void)unlockEncryptedDisk:(id)arg1 diskUnlockPassword:(id)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (void)validateEncryptedDiskPassword:(id)arg1 diskUnlockPassword:(id)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (void)iCloudRecoverManageFDEUsersForDisk:(id)arg1 icloudUser:(id)arg2 iCloudHandle:(id)arg3 usersToRemoveArray:(id)arg4 resettingUserPasswords:(id)arg5 fdeRecipe:(id)arg6 handlingProgress:(CDUnknownBlockType)arg7 withCompletionBlock:(CDUnknownBlockType)arg8;
- (void)manageFDEUsersForDisk:(id)arg1 diskUnlockPassword:(id)arg2 removingUsers:(id)arg3 resettingUserPasswords:(id)arg4 fdeRecipe:(id)arg5 handlingProgress:(CDUnknownBlockType)arg6 withCompletionBlock:(CDUnknownBlockType)arg7;
- (void)convertDisk:(id)arg1 toCoreStorage:(BOOL)arg2 handlingProgress:(CDUnknownBlockType)arg3 withCompletionBlock:(CDUnknownBlockType)arg4;
- (void)getRecoverySystemInfoForDisk:(id)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)enableJournalingOnDisk:(id)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)enablePermissionsOnDisk:(id)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)ensureRecoveryForDisk:(id)arg1 withRecoverySystemPath:(id)arg2 chunkkList:(id)arg3 diagnostics:(id)arg4 ignoreBlacklist:(BOOL)arg5 handlingProgress:(CDUnknownBlockType)arg6 callbackBlock:(CDUnknownBlockType)arg7;
- (void)blessDisk:(id)arg1 options:(id)arg2 withCallbackBlock:(CDUnknownBlockType)arg3;
- (void)compositeDisks:(id)arg1 volumeName:(id)arg2 handlingProgress:(CDUnknownBlockType)arg3 callbackBlock:(CDUnknownBlockType)arg4;
- (void)resize:(id)arg1 toSize:(unsigned long long)arg2 handlingProgress:(CDUnknownBlockType)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;
- (void)removeDisk:(id)arg1 handlingProgress:(CDUnknownBlockType)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
- (void)splitDisk:(id)arg1 toSize:(unsigned long long)arg2 newDiskRole:(id)arg3 name:(id)arg4 caseSensitive:(BOOL)arg5 password:(id)arg6 handlingProgress:(CDUnknownBlockType)arg7 withCompletionBlock:(CDUnknownBlockType)arg8;
- (void)splitDisk:(id)arg1 toSize:(unsigned long long)arg2 newDiskType:(id)arg3 name:(id)arg4 caseSensitive:(BOOL)arg5 password:(id)arg6 handlingProgress:(CDUnknownBlockType)arg7 withCompletionBlock:(CDUnknownBlockType)arg8;
- (void)ejectDisk:(id)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)mountDisk:(id)arg1 options:(id)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (void)unmountDisk:(id)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)renameDisk:(id)arg1 to:(id)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (void)secureEraseDisk:(id)arg1 withEraseLevel:(int)arg2 handlingProgress:(CDUnknownBlockType)arg3 withCompletionBlock:(CDUnknownBlockType)arg4;
- (void)eraseDisk:(id)arg1 toFilesystem:(id)arg2 partitionMap:(id)arg3 name:(id)arg4 password:(id)arg5 handlingProgress:(CDUnknownBlockType)arg6 withCompletionBlock:(CDUnknownBlockType)arg7;
- (void)repairUserHomeDirectoryForDisk:(id)arg1 forUser:(long long)arg2 handlingProgress:(CDUnknownBlockType)arg3 withCompletionBlock:(CDUnknownBlockType)arg4;
- (void)repairDisk:(id)arg1 handlingProgress:(CDUnknownBlockType)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (void)verifyDisk:(id)arg1 handlingProgress:(CDUnknownBlockType)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (void)setDiskIconWithImageData:(id)arg1 forDisk:(id)arg2 WithReply:(CDUnknownBlockType)arg3;
- (void)setDaemonLanguage:(id)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (id)diskNotificationQueue;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

